
Led-Strip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080022b8  080022b8  000122b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f0  080022f0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080022f0  080022f0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022f0  080022f0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080022f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000004  080022fc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080022fc  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a161  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001854  00000000  00000000  0002a18d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d8  00000000  00000000  0002b9e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000530  00000000  00000000  0002bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001744f  00000000  00000000  0002c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006798  00000000  00000000  0004393f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000763a4  00000000  00000000  0004a0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c047b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001398  00000000  00000000  000c04f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022a0 	.word	0x080022a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080022a0 	.word	0x080022a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 ff05 	bl	8002044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 ff80 	bl	8001154 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8e7 	bl	8000436 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8cb 	bl	800040c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000090 	.word	0x20000090

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000090 	.word	0x20000090

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b7f      	cmp	r3, #127	; 0x7f
 80002fc:	d932      	bls.n	8000364 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	4a2f      	ldr	r2, [pc, #188]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	0019      	movs	r1, r3
 8000306:	230f      	movs	r3, #15
 8000308:	400b      	ands	r3, r1
 800030a:	3b08      	subs	r3, #8
 800030c:	089b      	lsrs	r3, r3, #2
 800030e:	3306      	adds	r3, #6
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	18d3      	adds	r3, r2, r3
 8000314:	3304      	adds	r3, #4
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	1dfa      	adds	r2, r7, #7
 800031a:	7812      	ldrb	r2, [r2, #0]
 800031c:	0011      	movs	r1, r2
 800031e:	2203      	movs	r2, #3
 8000320:	400a      	ands	r2, r1
 8000322:	00d2      	lsls	r2, r2, #3
 8000324:	21ff      	movs	r1, #255	; 0xff
 8000326:	4091      	lsls	r1, r2
 8000328:	000a      	movs	r2, r1
 800032a:	43d2      	mvns	r2, r2
 800032c:	401a      	ands	r2, r3
 800032e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	019b      	lsls	r3, r3, #6
 8000334:	22ff      	movs	r2, #255	; 0xff
 8000336:	401a      	ands	r2, r3
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	0018      	movs	r0, r3
 800033e:	2303      	movs	r3, #3
 8000340:	4003      	ands	r3, r0
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	481d      	ldr	r0, [pc, #116]	; (80003bc <NVIC_SetPriority+0xd4>)
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	001c      	movs	r4, r3
 800034e:	230f      	movs	r3, #15
 8000350:	4023      	ands	r3, r4
 8000352:	3b08      	subs	r3, #8
 8000354:	089b      	lsrs	r3, r3, #2
 8000356:	430a      	orrs	r2, r1
 8000358:	3306      	adds	r3, #6
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	18c3      	adds	r3, r0, r3
 800035e:	3304      	adds	r3, #4
 8000360:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000362:	e027      	b.n	80003b4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000364:	4a16      	ldr	r2, [pc, #88]	; (80003c0 <NVIC_SetPriority+0xd8>)
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b25b      	sxtb	r3, r3
 800036c:	089b      	lsrs	r3, r3, #2
 800036e:	33c0      	adds	r3, #192	; 0xc0
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	589b      	ldr	r3, [r3, r2]
 8000374:	1dfa      	adds	r2, r7, #7
 8000376:	7812      	ldrb	r2, [r2, #0]
 8000378:	0011      	movs	r1, r2
 800037a:	2203      	movs	r2, #3
 800037c:	400a      	ands	r2, r1
 800037e:	00d2      	lsls	r2, r2, #3
 8000380:	21ff      	movs	r1, #255	; 0xff
 8000382:	4091      	lsls	r1, r2
 8000384:	000a      	movs	r2, r1
 8000386:	43d2      	mvns	r2, r2
 8000388:	401a      	ands	r2, r3
 800038a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	019b      	lsls	r3, r3, #6
 8000390:	22ff      	movs	r2, #255	; 0xff
 8000392:	401a      	ands	r2, r3
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	0018      	movs	r0, r3
 800039a:	2303      	movs	r3, #3
 800039c:	4003      	ands	r3, r0
 800039e:	00db      	lsls	r3, r3, #3
 80003a0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a2:	4807      	ldr	r0, [pc, #28]	; (80003c0 <NVIC_SetPriority+0xd8>)
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	b25b      	sxtb	r3, r3
 80003aa:	089b      	lsrs	r3, r3, #2
 80003ac:	430a      	orrs	r2, r1
 80003ae:	33c0      	adds	r3, #192	; 0xc0
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	501a      	str	r2, [r3, r0]
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	b003      	add	sp, #12
 80003ba:	bd90      	pop	{r4, r7, pc}
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	e000e100 	.word	0xe000e100

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <SysTick_Config+0x40>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d901      	bls.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e010      	b.n	80003fc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <SysTick_Config+0x44>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	3a01      	subs	r2, #1
 80003e0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	2301      	movs	r3, #1
 80003e4:	425b      	negs	r3, r3
 80003e6:	2103      	movs	r1, #3
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff7d 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ee:	4b06      	ldr	r3, [pc, #24]	; (8000408 <SysTick_Config+0x44>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x44>)
 80003f6:	2207      	movs	r2, #7
 80003f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fa:	2300      	movs	r3, #0
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	b002      	add	sp, #8
 8000402:	bd80      	pop	{r7, pc}
 8000404:	00ffffff 	.word	0x00ffffff
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	210f      	movs	r1, #15
 8000418:	187b      	adds	r3, r7, r1
 800041a:	1c02      	adds	r2, r0, #0
 800041c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800041e:	68ba      	ldr	r2, [r7, #8]
 8000420:	187b      	adds	r3, r7, r1
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	b25b      	sxtb	r3, r3
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ff5d 	bl	80002e8 <NVIC_SetPriority>
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b004      	add	sp, #16
 8000434:	bd80      	pop	{r7, pc}

08000436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff ffbf 	bl	80003c4 <SysTick_Config>
 8000446:	0003      	movs	r3, r0
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000466:	e155      	b.n	8000714 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	697a      	ldr	r2, [r7, #20]
 8000470:	4091      	lsls	r1, r2
 8000472:	000a      	movs	r2, r1
 8000474:	4013      	ands	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d100      	bne.n	8000480 <HAL_GPIO_Init+0x30>
 800047e:	e146      	b.n	800070e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	2b02      	cmp	r3, #2
 8000486:	d003      	beq.n	8000490 <HAL_GPIO_Init+0x40>
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b12      	cmp	r3, #18
 800048e:	d123      	bne.n	80004d8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	08da      	lsrs	r2, r3, #3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3208      	adds	r2, #8
 8000498:	0092      	lsls	r2, r2, #2
 800049a:	58d3      	ldr	r3, [r2, r3]
 800049c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	2207      	movs	r2, #7
 80004a2:	4013      	ands	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	220f      	movs	r2, #15
 80004a8:	409a      	lsls	r2, r3
 80004aa:	0013      	movs	r3, r2
 80004ac:	43da      	mvns	r2, r3
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	4013      	ands	r3, r2
 80004b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	691a      	ldr	r2, [r3, #16]
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	2107      	movs	r1, #7
 80004bc:	400b      	ands	r3, r1
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	409a      	lsls	r2, r3
 80004c2:	0013      	movs	r3, r2
 80004c4:	693a      	ldr	r2, [r7, #16]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	08da      	lsrs	r2, r3, #3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3208      	adds	r2, #8
 80004d2:	0092      	lsls	r2, r2, #2
 80004d4:	6939      	ldr	r1, [r7, #16]
 80004d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	2203      	movs	r2, #3
 80004e4:	409a      	lsls	r2, r3
 80004e6:	0013      	movs	r3, r2
 80004e8:	43da      	mvns	r2, r3
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	4013      	ands	r3, r2
 80004ee:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2203      	movs	r2, #3
 80004f6:	401a      	ands	r2, r3
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	409a      	lsls	r2, r3
 80004fe:	0013      	movs	r3, r2
 8000500:	693a      	ldr	r2, [r7, #16]
 8000502:	4313      	orrs	r3, r2
 8000504:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	693a      	ldr	r2, [r7, #16]
 800050a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d00b      	beq.n	800052c <HAL_GPIO_Init+0xdc>
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d007      	beq.n	800052c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000520:	2b11      	cmp	r3, #17
 8000522:	d003      	beq.n	800052c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b12      	cmp	r3, #18
 800052a:	d130      	bne.n	800058e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	409a      	lsls	r2, r3
 800053a:	0013      	movs	r3, r2
 800053c:	43da      	mvns	r2, r3
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	68da      	ldr	r2, [r3, #12]
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	409a      	lsls	r2, r3
 800054e:	0013      	movs	r3, r2
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	4313      	orrs	r3, r2
 8000554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000562:	2201      	movs	r2, #1
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	409a      	lsls	r2, r3
 8000568:	0013      	movs	r3, r2
 800056a:	43da      	mvns	r2, r3
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	4013      	ands	r3, r2
 8000570:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	091b      	lsrs	r3, r3, #4
 8000578:	2201      	movs	r2, #1
 800057a:	401a      	ands	r2, r3
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	409a      	lsls	r2, r3
 8000580:	0013      	movs	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	4313      	orrs	r3, r2
 8000586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	2203      	movs	r2, #3
 800059a:	409a      	lsls	r2, r3
 800059c:	0013      	movs	r3, r2
 800059e:	43da      	mvns	r2, r3
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	4013      	ands	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	689a      	ldr	r2, [r3, #8]
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0013      	movs	r3, r2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	055b      	lsls	r3, r3, #21
 80005c6:	4013      	ands	r3, r2
 80005c8:	d100      	bne.n	80005cc <HAL_GPIO_Init+0x17c>
 80005ca:	e0a0      	b.n	800070e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005cc:	4b57      	ldr	r3, [pc, #348]	; (800072c <HAL_GPIO_Init+0x2dc>)
 80005ce:	699a      	ldr	r2, [r3, #24]
 80005d0:	4b56      	ldr	r3, [pc, #344]	; (800072c <HAL_GPIO_Init+0x2dc>)
 80005d2:	2101      	movs	r1, #1
 80005d4:	430a      	orrs	r2, r1
 80005d6:	619a      	str	r2, [r3, #24]
 80005d8:	4b54      	ldr	r3, [pc, #336]	; (800072c <HAL_GPIO_Init+0x2dc>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	2201      	movs	r2, #1
 80005de:	4013      	ands	r3, r2
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005e4:	4a52      	ldr	r2, [pc, #328]	; (8000730 <HAL_GPIO_Init+0x2e0>)
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	3302      	adds	r3, #2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	589b      	ldr	r3, [r3, r2]
 80005f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	2203      	movs	r2, #3
 80005f6:	4013      	ands	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	220f      	movs	r2, #15
 80005fc:	409a      	lsls	r2, r3
 80005fe:	0013      	movs	r3, r2
 8000600:	43da      	mvns	r2, r3
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	4013      	ands	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	429a      	cmp	r2, r3
 8000610:	d019      	beq.n	8000646 <HAL_GPIO_Init+0x1f6>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a47      	ldr	r2, [pc, #284]	; (8000734 <HAL_GPIO_Init+0x2e4>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d013      	beq.n	8000642 <HAL_GPIO_Init+0x1f2>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a46      	ldr	r2, [pc, #280]	; (8000738 <HAL_GPIO_Init+0x2e8>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d00d      	beq.n	800063e <HAL_GPIO_Init+0x1ee>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a45      	ldr	r2, [pc, #276]	; (800073c <HAL_GPIO_Init+0x2ec>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d007      	beq.n	800063a <HAL_GPIO_Init+0x1ea>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a44      	ldr	r2, [pc, #272]	; (8000740 <HAL_GPIO_Init+0x2f0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d101      	bne.n	8000636 <HAL_GPIO_Init+0x1e6>
 8000632:	2304      	movs	r3, #4
 8000634:	e008      	b.n	8000648 <HAL_GPIO_Init+0x1f8>
 8000636:	2305      	movs	r3, #5
 8000638:	e006      	b.n	8000648 <HAL_GPIO_Init+0x1f8>
 800063a:	2303      	movs	r3, #3
 800063c:	e004      	b.n	8000648 <HAL_GPIO_Init+0x1f8>
 800063e:	2302      	movs	r3, #2
 8000640:	e002      	b.n	8000648 <HAL_GPIO_Init+0x1f8>
 8000642:	2301      	movs	r3, #1
 8000644:	e000      	b.n	8000648 <HAL_GPIO_Init+0x1f8>
 8000646:	2300      	movs	r3, #0
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	2103      	movs	r1, #3
 800064c:	400a      	ands	r2, r1
 800064e:	0092      	lsls	r2, r2, #2
 8000650:	4093      	lsls	r3, r2
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000658:	4935      	ldr	r1, [pc, #212]	; (8000730 <HAL_GPIO_Init+0x2e0>)
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	089b      	lsrs	r3, r3, #2
 800065e:	3302      	adds	r3, #2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	43da      	mvns	r2, r3
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	4013      	ands	r3, r2
 8000674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	685a      	ldr	r2, [r3, #4]
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	025b      	lsls	r3, r3, #9
 800067e:	4013      	ands	r3, r2
 8000680:	d003      	beq.n	800068a <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4313      	orrs	r3, r2
 8000688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 800068c:	693a      	ldr	r2, [r7, #16]
 800068e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000690:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	43da      	mvns	r2, r3
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	4013      	ands	r3, r2
 800069e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	029b      	lsls	r3, r3, #10
 80006a8:	4013      	ands	r3, r2
 80006aa:	d003      	beq.n	80006b4 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006ba:	4b22      	ldr	r3, [pc, #136]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	43da      	mvns	r2, r3
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	4013      	ands	r3, r2
 80006c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	685a      	ldr	r2, [r3, #4]
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	035b      	lsls	r3, r3, #13
 80006d2:	4013      	ands	r3, r2
 80006d4:	d003      	beq.n	80006de <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4313      	orrs	r3, r2
 80006dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	43da      	mvns	r2, r3
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	4013      	ands	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	685a      	ldr	r2, [r3, #4]
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	039b      	lsls	r3, r3, #14
 80006fc:	4013      	ands	r3, r2
 80006fe:	d003      	beq.n	8000708 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8000700:	693a      	ldr	r2, [r7, #16]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4313      	orrs	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_GPIO_Init+0x2f4>)
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3301      	adds	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	40da      	lsrs	r2, r3
 800071c:	1e13      	subs	r3, r2, #0
 800071e:	d000      	beq.n	8000722 <HAL_GPIO_Init+0x2d2>
 8000720:	e6a2      	b.n	8000468 <HAL_GPIO_Init+0x18>
  } 
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b006      	add	sp, #24
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40021000 	.word	0x40021000
 8000730:	40010000 	.word	0x40010000
 8000734:	48000400 	.word	0x48000400
 8000738:	48000800 	.word	0x48000800
 800073c:	48000c00 	.word	0x48000c00
 8000740:	48001000 	.word	0x48001000
 8000744:	40010400 	.word	0x40010400

08000748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	0008      	movs	r0, r1
 8000752:	0011      	movs	r1, r2
 8000754:	1cbb      	adds	r3, r7, #2
 8000756:	1c02      	adds	r2, r0, #0
 8000758:	801a      	strh	r2, [r3, #0]
 800075a:	1c7b      	adds	r3, r7, #1
 800075c:	1c0a      	adds	r2, r1, #0
 800075e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000760:	1c7b      	adds	r3, r7, #1
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d004      	beq.n	8000772 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000768:	1cbb      	adds	r3, r7, #2
 800076a:	881a      	ldrh	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000770:	e003      	b.n	800077a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000772:	1cbb      	adds	r3, r7, #2
 8000774:	881a      	ldrh	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2201      	movs	r2, #1
 8000796:	4013      	ands	r3, r2
 8000798:	d100      	bne.n	800079c <HAL_RCC_OscConfig+0x18>
 800079a:	e08d      	b.n	80008b8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800079c:	4bc5      	ldr	r3, [pc, #788]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	220c      	movs	r2, #12
 80007a2:	4013      	ands	r3, r2
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d00e      	beq.n	80007c6 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007a8:	4bc2      	ldr	r3, [pc, #776]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	220c      	movs	r2, #12
 80007ae:	4013      	ands	r3, r2
 80007b0:	2b08      	cmp	r3, #8
 80007b2:	d116      	bne.n	80007e2 <HAL_RCC_OscConfig+0x5e>
 80007b4:	4bbf      	ldr	r3, [pc, #764]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80007b6:	685a      	ldr	r2, [r3, #4]
 80007b8:	23c0      	movs	r3, #192	; 0xc0
 80007ba:	025b      	lsls	r3, r3, #9
 80007bc:	401a      	ands	r2, r3
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	025b      	lsls	r3, r3, #9
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d10d      	bne.n	80007e2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007c6:	4bbb      	ldr	r3, [pc, #748]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	029b      	lsls	r3, r3, #10
 80007ce:	4013      	ands	r3, r2
 80007d0:	d100      	bne.n	80007d4 <HAL_RCC_OscConfig+0x50>
 80007d2:	e070      	b.n	80008b6 <HAL_RCC_OscConfig+0x132>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d000      	beq.n	80007de <HAL_RCC_OscConfig+0x5a>
 80007dc:	e06b      	b.n	80008b6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e329      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d107      	bne.n	80007fa <HAL_RCC_OscConfig+0x76>
 80007ea:	4bb2      	ldr	r3, [pc, #712]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	4bb1      	ldr	r3, [pc, #708]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	0249      	lsls	r1, r1, #9
 80007f4:	430a      	orrs	r2, r1
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	e02f      	b.n	800085a <HAL_RCC_OscConfig+0xd6>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10c      	bne.n	800081c <HAL_RCC_OscConfig+0x98>
 8000802:	4bac      	ldr	r3, [pc, #688]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4bab      	ldr	r3, [pc, #684]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000808:	49ab      	ldr	r1, [pc, #684]	; (8000ab8 <HAL_RCC_OscConfig+0x334>)
 800080a:	400a      	ands	r2, r1
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	4ba9      	ldr	r3, [pc, #676]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	4ba8      	ldr	r3, [pc, #672]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000814:	49a9      	ldr	r1, [pc, #676]	; (8000abc <HAL_RCC_OscConfig+0x338>)
 8000816:	400a      	ands	r2, r1
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	e01e      	b.n	800085a <HAL_RCC_OscConfig+0xd6>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b05      	cmp	r3, #5
 8000822:	d10e      	bne.n	8000842 <HAL_RCC_OscConfig+0xbe>
 8000824:	4ba3      	ldr	r3, [pc, #652]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4ba2      	ldr	r3, [pc, #648]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	02c9      	lsls	r1, r1, #11
 800082e:	430a      	orrs	r2, r1
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	4ba0      	ldr	r3, [pc, #640]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b9f      	ldr	r3, [pc, #636]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	0249      	lsls	r1, r1, #9
 800083c:	430a      	orrs	r2, r1
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	e00b      	b.n	800085a <HAL_RCC_OscConfig+0xd6>
 8000842:	4b9c      	ldr	r3, [pc, #624]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b9b      	ldr	r3, [pc, #620]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000848:	499b      	ldr	r1, [pc, #620]	; (8000ab8 <HAL_RCC_OscConfig+0x334>)
 800084a:	400a      	ands	r2, r1
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	4b99      	ldr	r3, [pc, #612]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4b98      	ldr	r3, [pc, #608]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000854:	4999      	ldr	r1, [pc, #612]	; (8000abc <HAL_RCC_OscConfig+0x338>)
 8000856:	400a      	ands	r2, r1
 8000858:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d014      	beq.n	800088c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000862:	f7ff fd19 	bl	8000298 <HAL_GetTick>
 8000866:	0003      	movs	r3, r0
 8000868:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800086a:	e008      	b.n	800087e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800086c:	f7ff fd14 	bl	8000298 <HAL_GetTick>
 8000870:	0002      	movs	r2, r0
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2b64      	cmp	r3, #100	; 0x64
 8000878:	d901      	bls.n	800087e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	e2db      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087e:	4b8d      	ldr	r3, [pc, #564]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	029b      	lsls	r3, r3, #10
 8000886:	4013      	ands	r3, r2
 8000888:	d0f0      	beq.n	800086c <HAL_RCC_OscConfig+0xe8>
 800088a:	e015      	b.n	80008b8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800088c:	f7ff fd04 	bl	8000298 <HAL_GetTick>
 8000890:	0003      	movs	r3, r0
 8000892:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000894:	e008      	b.n	80008a8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000896:	f7ff fcff 	bl	8000298 <HAL_GetTick>
 800089a:	0002      	movs	r2, r0
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	2b64      	cmp	r3, #100	; 0x64
 80008a2:	d901      	bls.n	80008a8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80008a4:	2303      	movs	r3, #3
 80008a6:	e2c6      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a8:	4b82      	ldr	r3, [pc, #520]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	029b      	lsls	r3, r3, #10
 80008b0:	4013      	ands	r3, r2
 80008b2:	d1f0      	bne.n	8000896 <HAL_RCC_OscConfig+0x112>
 80008b4:	e000      	b.n	80008b8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2202      	movs	r2, #2
 80008be:	4013      	ands	r3, r2
 80008c0:	d100      	bne.n	80008c4 <HAL_RCC_OscConfig+0x140>
 80008c2:	e06c      	b.n	800099e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008c4:	4b7b      	ldr	r3, [pc, #492]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	220c      	movs	r2, #12
 80008ca:	4013      	ands	r3, r2
 80008cc:	d00e      	beq.n	80008ec <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008ce:	4b79      	ldr	r3, [pc, #484]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	220c      	movs	r2, #12
 80008d4:	4013      	ands	r3, r2
 80008d6:	2b08      	cmp	r3, #8
 80008d8:	d11f      	bne.n	800091a <HAL_RCC_OscConfig+0x196>
 80008da:	4b76      	ldr	r3, [pc, #472]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	23c0      	movs	r3, #192	; 0xc0
 80008e0:	025b      	lsls	r3, r3, #9
 80008e2:	401a      	ands	r2, r3
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d116      	bne.n	800091a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ec:	4b71      	ldr	r3, [pc, #452]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2202      	movs	r2, #2
 80008f2:	4013      	ands	r3, r2
 80008f4:	d005      	beq.n	8000902 <HAL_RCC_OscConfig+0x17e>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d001      	beq.n	8000902 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e299      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000902:	4b6c      	ldr	r3, [pc, #432]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	22f8      	movs	r2, #248	; 0xf8
 8000908:	4393      	bics	r3, r2
 800090a:	0019      	movs	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	691b      	ldr	r3, [r3, #16]
 8000910:	00da      	lsls	r2, r3, #3
 8000912:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000914:	430a      	orrs	r2, r1
 8000916:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000918:	e041      	b.n	800099e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d024      	beq.n	800096c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000922:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800092e:	f7ff fcb3 	bl	8000298 <HAL_GetTick>
 8000932:	0003      	movs	r3, r0
 8000934:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000936:	e008      	b.n	800094a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000938:	f7ff fcae 	bl	8000298 <HAL_GetTick>
 800093c:	0002      	movs	r2, r0
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2b02      	cmp	r3, #2
 8000944:	d901      	bls.n	800094a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000946:	2303      	movs	r3, #3
 8000948:	e275      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2202      	movs	r2, #2
 8000950:	4013      	ands	r3, r2
 8000952:	d0f1      	beq.n	8000938 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000954:	4b57      	ldr	r3, [pc, #348]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	22f8      	movs	r2, #248	; 0xf8
 800095a:	4393      	bics	r3, r2
 800095c:	0019      	movs	r1, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	00da      	lsls	r2, r3, #3
 8000964:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000966:	430a      	orrs	r2, r1
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e018      	b.n	800099e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800096c:	4b51      	ldr	r3, [pc, #324]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000972:	2101      	movs	r1, #1
 8000974:	438a      	bics	r2, r1
 8000976:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000978:	f7ff fc8e 	bl	8000298 <HAL_GetTick>
 800097c:	0003      	movs	r3, r0
 800097e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000980:	e008      	b.n	8000994 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000982:	f7ff fc89 	bl	8000298 <HAL_GetTick>
 8000986:	0002      	movs	r2, r0
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	2b02      	cmp	r3, #2
 800098e:	d901      	bls.n	8000994 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000990:	2303      	movs	r3, #3
 8000992:	e250      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000994:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2202      	movs	r2, #2
 800099a:	4013      	ands	r3, r2
 800099c:	d1f1      	bne.n	8000982 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2208      	movs	r2, #8
 80009a4:	4013      	ands	r3, r2
 80009a6:	d036      	beq.n	8000a16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d019      	beq.n	80009e4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009b0:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80009b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009b4:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80009b6:	2101      	movs	r1, #1
 80009b8:	430a      	orrs	r2, r1
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009bc:	f7ff fc6c 	bl	8000298 <HAL_GetTick>
 80009c0:	0003      	movs	r3, r0
 80009c2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c4:	e008      	b.n	80009d8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c6:	f7ff fc67 	bl	8000298 <HAL_GetTick>
 80009ca:	0002      	movs	r2, r0
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d901      	bls.n	80009d8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80009d4:	2303      	movs	r3, #3
 80009d6:	e22e      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d8:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80009da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009dc:	2202      	movs	r2, #2
 80009de:	4013      	ands	r3, r2
 80009e0:	d0f1      	beq.n	80009c6 <HAL_RCC_OscConfig+0x242>
 80009e2:	e018      	b.n	8000a16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009e4:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80009e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 80009ea:	2101      	movs	r1, #1
 80009ec:	438a      	bics	r2, r1
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009f0:	f7ff fc52 	bl	8000298 <HAL_GetTick>
 80009f4:	0003      	movs	r3, r0
 80009f6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009f8:	e008      	b.n	8000a0c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009fa:	f7ff fc4d 	bl	8000298 <HAL_GetTick>
 80009fe:	0002      	movs	r2, r0
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d901      	bls.n	8000a0c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	e214      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	2202      	movs	r2, #2
 8000a12:	4013      	ands	r3, r2
 8000a14:	d1f1      	bne.n	80009fa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	d100      	bne.n	8000a22 <HAL_RCC_OscConfig+0x29e>
 8000a20:	e0b6      	b.n	8000b90 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a22:	2317      	movs	r3, #23
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000a2c:	69da      	ldr	r2, [r3, #28]
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	055b      	lsls	r3, r3, #21
 8000a32:	4013      	ands	r3, r2
 8000a34:	d111      	bne.n	8000a5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000a38:	69da      	ldr	r2, [r3, #28]
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	0549      	lsls	r1, r1, #21
 8000a40:	430a      	orrs	r2, r1
 8000a42:	61da      	str	r2, [r3, #28]
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000a46:	69da      	ldr	r2, [r3, #28]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	055b      	lsls	r3, r3, #21
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a52:	2317      	movs	r3, #23
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_RCC_OscConfig+0x33c>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	4013      	ands	r3, r2
 8000a64:	d11a      	bne.n	8000a9c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_RCC_OscConfig+0x33c>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_RCC_OscConfig+0x33c>)
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	0049      	lsls	r1, r1, #1
 8000a70:	430a      	orrs	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a74:	f7ff fc10 	bl	8000298 <HAL_GetTick>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a7c:	e008      	b.n	8000a90 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a7e:	f7ff fc0b 	bl	8000298 <HAL_GetTick>
 8000a82:	0002      	movs	r2, r0
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	2b64      	cmp	r3, #100	; 0x64
 8000a8a:	d901      	bls.n	8000a90 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	e1d2      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_RCC_OscConfig+0x33c>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4013      	ands	r3, r2
 8000a9a:	d0f0      	beq.n	8000a7e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d10f      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x340>
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000aa6:	6a1a      	ldr	r2, [r3, #32]
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <HAL_RCC_OscConfig+0x330>)
 8000aaa:	2101      	movs	r1, #1
 8000aac:	430a      	orrs	r2, r1
 8000aae:	621a      	str	r2, [r3, #32]
 8000ab0:	e036      	b.n	8000b20 <HAL_RCC_OscConfig+0x39c>
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	fffeffff 	.word	0xfffeffff
 8000abc:	fffbffff 	.word	0xfffbffff
 8000ac0:	40007000 	.word	0x40007000
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d10c      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x362>
 8000acc:	4bca      	ldr	r3, [pc, #808]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000ace:	6a1a      	ldr	r2, [r3, #32]
 8000ad0:	4bc9      	ldr	r3, [pc, #804]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	438a      	bics	r2, r1
 8000ad6:	621a      	str	r2, [r3, #32]
 8000ad8:	4bc7      	ldr	r3, [pc, #796]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000ada:	6a1a      	ldr	r2, [r3, #32]
 8000adc:	4bc6      	ldr	r3, [pc, #792]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000ade:	2104      	movs	r1, #4
 8000ae0:	438a      	bics	r2, r1
 8000ae2:	621a      	str	r2, [r3, #32]
 8000ae4:	e01c      	b.n	8000b20 <HAL_RCC_OscConfig+0x39c>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	d10c      	bne.n	8000b08 <HAL_RCC_OscConfig+0x384>
 8000aee:	4bc2      	ldr	r3, [pc, #776]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000af0:	6a1a      	ldr	r2, [r3, #32]
 8000af2:	4bc1      	ldr	r3, [pc, #772]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000af4:	2104      	movs	r1, #4
 8000af6:	430a      	orrs	r2, r1
 8000af8:	621a      	str	r2, [r3, #32]
 8000afa:	4bbf      	ldr	r3, [pc, #764]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000afc:	6a1a      	ldr	r2, [r3, #32]
 8000afe:	4bbe      	ldr	r3, [pc, #760]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	430a      	orrs	r2, r1
 8000b04:	621a      	str	r2, [r3, #32]
 8000b06:	e00b      	b.n	8000b20 <HAL_RCC_OscConfig+0x39c>
 8000b08:	4bbb      	ldr	r3, [pc, #748]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000b0a:	6a1a      	ldr	r2, [r3, #32]
 8000b0c:	4bba      	ldr	r3, [pc, #744]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000b0e:	2101      	movs	r1, #1
 8000b10:	438a      	bics	r2, r1
 8000b12:	621a      	str	r2, [r3, #32]
 8000b14:	4bb8      	ldr	r3, [pc, #736]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000b16:	6a1a      	ldr	r2, [r3, #32]
 8000b18:	4bb7      	ldr	r3, [pc, #732]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	438a      	bics	r2, r1
 8000b1e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d014      	beq.n	8000b52 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b28:	f7ff fbb6 	bl	8000298 <HAL_GetTick>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b30:	e009      	b.n	8000b46 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f7ff fbb1 	bl	8000298 <HAL_GetTick>
 8000b36:	0002      	movs	r2, r0
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	4aaf      	ldr	r2, [pc, #700]	; (8000dfc <HAL_RCC_OscConfig+0x678>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d901      	bls.n	8000b46 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e177      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b46:	4bac      	ldr	r3, [pc, #688]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000b48:	6a1b      	ldr	r3, [r3, #32]
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	d0f0      	beq.n	8000b32 <HAL_RCC_OscConfig+0x3ae>
 8000b50:	e013      	b.n	8000b7a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b52:	f7ff fba1 	bl	8000298 <HAL_GetTick>
 8000b56:	0003      	movs	r3, r0
 8000b58:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b5a:	e009      	b.n	8000b70 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b5c:	f7ff fb9c 	bl	8000298 <HAL_GetTick>
 8000b60:	0002      	movs	r2, r0
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	4aa5      	ldr	r2, [pc, #660]	; (8000dfc <HAL_RCC_OscConfig+0x678>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d901      	bls.n	8000b70 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e162      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b70:	4ba1      	ldr	r3, [pc, #644]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000b72:	6a1b      	ldr	r3, [r3, #32]
 8000b74:	2202      	movs	r2, #2
 8000b76:	4013      	ands	r3, r2
 8000b78:	d1f0      	bne.n	8000b5c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b7a:	2317      	movs	r3, #23
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d105      	bne.n	8000b90 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b84:	4b9c      	ldr	r3, [pc, #624]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000b86:	69da      	ldr	r2, [r3, #28]
 8000b88:	4b9b      	ldr	r3, [pc, #620]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000b8a:	499d      	ldr	r1, [pc, #628]	; (8000e00 <HAL_RCC_OscConfig+0x67c>)
 8000b8c:	400a      	ands	r2, r1
 8000b8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2210      	movs	r2, #16
 8000b96:	4013      	ands	r3, r2
 8000b98:	d063      	beq.n	8000c62 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d12a      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ba2:	4b95      	ldr	r3, [pc, #596]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba6:	4b94      	ldr	r3, [pc, #592]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000ba8:	2104      	movs	r1, #4
 8000baa:	430a      	orrs	r2, r1
 8000bac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000bae:	4b92      	ldr	r3, [pc, #584]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb2:	4b91      	ldr	r3, [pc, #580]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bba:	f7ff fb6d 	bl	8000298 <HAL_GetTick>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bc2:	e008      	b.n	8000bd6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bc4:	f7ff fb68 	bl	8000298 <HAL_GetTick>
 8000bc8:	0002      	movs	r2, r0
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d901      	bls.n	8000bd6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e12f      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000bd6:	4b88      	ldr	r3, [pc, #544]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	2202      	movs	r2, #2
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d0f1      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000be0:	4b85      	ldr	r3, [pc, #532]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be4:	22f8      	movs	r2, #248	; 0xf8
 8000be6:	4393      	bics	r3, r2
 8000be8:	0019      	movs	r1, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	00da      	lsls	r2, r3, #3
 8000bf0:	4b81      	ldr	r3, [pc, #516]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf6:	e034      	b.n	8000c62 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	3305      	adds	r3, #5
 8000bfe:	d111      	bne.n	8000c24 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c00:	4b7d      	ldr	r3, [pc, #500]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c04:	4b7c      	ldr	r3, [pc, #496]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c06:	2104      	movs	r1, #4
 8000c08:	438a      	bics	r2, r1
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c0c:	4b7a      	ldr	r3, [pc, #488]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c10:	22f8      	movs	r2, #248	; 0xf8
 8000c12:	4393      	bics	r3, r2
 8000c14:	0019      	movs	r1, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	00da      	lsls	r2, r3, #3
 8000c1c:	4b76      	ldr	r3, [pc, #472]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
 8000c22:	e01e      	b.n	8000c62 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c24:	4b74      	ldr	r3, [pc, #464]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c28:	4b73      	ldr	r3, [pc, #460]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000c30:	4b71      	ldr	r3, [pc, #452]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c34:	4b70      	ldr	r3, [pc, #448]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c36:	2101      	movs	r1, #1
 8000c38:	438a      	bics	r2, r1
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c3c:	f7ff fb2c 	bl	8000298 <HAL_GetTick>
 8000c40:	0003      	movs	r3, r0
 8000c42:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c44:	e008      	b.n	8000c58 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c46:	f7ff fb27 	bl	8000298 <HAL_GetTick>
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d901      	bls.n	8000c58 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000c54:	2303      	movs	r3, #3
 8000c56:	e0ee      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c58:	4b67      	ldr	r3, [pc, #412]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d1f1      	bne.n	8000c46 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2220      	movs	r2, #32
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d05c      	beq.n	8000d26 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000c6c:	4b62      	ldr	r3, [pc, #392]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	220c      	movs	r2, #12
 8000c72:	4013      	ands	r3, r2
 8000c74:	2b0c      	cmp	r3, #12
 8000c76:	d00e      	beq.n	8000c96 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000c78:	4b5f      	ldr	r3, [pc, #380]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d114      	bne.n	8000cae <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000c84:	4b5c      	ldr	r3, [pc, #368]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	23c0      	movs	r3, #192	; 0xc0
 8000c8a:	025b      	lsls	r3, r3, #9
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	23c0      	movs	r3, #192	; 0xc0
 8000c90:	025b      	lsls	r3, r3, #9
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d10b      	bne.n	8000cae <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000c96:	4b58      	ldr	r3, [pc, #352]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	025b      	lsls	r3, r3, #9
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	d040      	beq.n	8000d24 <HAL_RCC_OscConfig+0x5a0>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a1b      	ldr	r3, [r3, #32]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d03c      	beq.n	8000d24 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e0c3      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d01b      	beq.n	8000cee <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000cb6:	4b50      	ldr	r3, [pc, #320]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cba:	4b4f      	ldr	r3, [pc, #316]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	0249      	lsls	r1, r1, #9
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fae8 	bl	8000298 <HAL_GetTick>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000ccc:	e008      	b.n	8000ce0 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000cce:	f7ff fae3 	bl	8000298 <HAL_GetTick>
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e0aa      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000ce0:	4b45      	ldr	r3, [pc, #276]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	025b      	lsls	r3, r3, #9
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d0f0      	beq.n	8000cce <HAL_RCC_OscConfig+0x54a>
 8000cec:	e01b      	b.n	8000d26 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000cee:	4b42      	ldr	r3, [pc, #264]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf2:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000cf4:	4943      	ldr	r1, [pc, #268]	; (8000e04 <HAL_RCC_OscConfig+0x680>)
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfa:	f7ff facd 	bl	8000298 <HAL_GetTick>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d02:	e008      	b.n	8000d16 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d04:	f7ff fac8 	bl	8000298 <HAL_GetTick>
 8000d08:	0002      	movs	r2, r0
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d901      	bls.n	8000d16 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e08f      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	025b      	lsls	r3, r3, #9
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d1f0      	bne.n	8000d04 <HAL_RCC_OscConfig+0x580>
 8000d22:	e000      	b.n	8000d26 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000d24:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d100      	bne.n	8000d30 <HAL_RCC_OscConfig+0x5ac>
 8000d2e:	e081      	b.n	8000e34 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d30:	4b31      	ldr	r3, [pc, #196]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	220c      	movs	r2, #12
 8000d36:	4013      	ands	r3, r2
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d100      	bne.n	8000d3e <HAL_RCC_OscConfig+0x5ba>
 8000d3c:	e078      	b.n	8000e30 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d14c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d46:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000d4c:	492e      	ldr	r1, [pc, #184]	; (8000e08 <HAL_RCC_OscConfig+0x684>)
 8000d4e:	400a      	ands	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d52:	f7ff faa1 	bl	8000298 <HAL_GetTick>
 8000d56:	0003      	movs	r3, r0
 8000d58:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d5c:	f7ff fa9c 	bl	8000298 <HAL_GetTick>
 8000d60:	0002      	movs	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e063      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	049b      	lsls	r3, r3, #18
 8000d76:	4013      	ands	r3, r2
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	220f      	movs	r2, #15
 8000d80:	4393      	bics	r3, r2
 8000d82:	0019      	movs	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <HAL_RCC_OscConfig+0x688>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	0019      	movs	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da0:	431a      	orrs	r2, r3
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000da4:	430a      	orrs	r2, r1
 8000da6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	0449      	lsls	r1, r1, #17
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db6:	f7ff fa6f 	bl	8000298 <HAL_GetTick>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc0:	f7ff fa6a 	bl	8000298 <HAL_GetTick>
 8000dc4:	0002      	movs	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e031      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	049b      	lsls	r3, r3, #18
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d0f0      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x63c>
 8000dde:	e029      	b.n	8000e34 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_RCC_OscConfig+0x674>)
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <HAL_RCC_OscConfig+0x684>)
 8000de8:	400a      	ands	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fa54 	bl	8000298 <HAL_GetTick>
 8000df0:	0003      	movs	r3, r0
 8000df2:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000df4:	e015      	b.n	8000e22 <HAL_RCC_OscConfig+0x69e>
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	00001388 	.word	0x00001388
 8000e00:	efffffff 	.word	0xefffffff
 8000e04:	fffeffff 	.word	0xfffeffff
 8000e08:	feffffff 	.word	0xfeffffff
 8000e0c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e10:	f7ff fa42 	bl	8000298 <HAL_GetTick>
 8000e14:	0002      	movs	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e009      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <HAL_RCC_OscConfig+0x6bc>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	049b      	lsls	r3, r3, #18
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d1f0      	bne.n	8000e10 <HAL_RCC_OscConfig+0x68c>
 8000e2e:	e001      	b.n	8000e34 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b006      	add	sp, #24
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e52:	4b7b      	ldr	r3, [pc, #492]	; (8001040 <HAL_RCC_ClockConfig+0x1fc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2201      	movs	r2, #1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d911      	bls.n	8000e84 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e60:	4b77      	ldr	r3, [pc, #476]	; (8001040 <HAL_RCC_ClockConfig+0x1fc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2201      	movs	r2, #1
 8000e66:	4393      	bics	r3, r2
 8000e68:	0019      	movs	r1, r3
 8000e6a:	4b75      	ldr	r3, [pc, #468]	; (8001040 <HAL_RCC_ClockConfig+0x1fc>)
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e72:	4b73      	ldr	r3, [pc, #460]	; (8001040 <HAL_RCC_ClockConfig+0x1fc>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2201      	movs	r2, #1
 8000e78:	4013      	ands	r3, r2
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d001      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e0d8      	b.n	8001036 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2202      	movs	r2, #2
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d009      	beq.n	8000ea2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e8e:	4b6d      	ldr	r3, [pc, #436]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	22f0      	movs	r2, #240	; 0xf0
 8000e94:	4393      	bics	r3, r2
 8000e96:	0019      	movs	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	4b69      	ldr	r3, [pc, #420]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d100      	bne.n	8000eae <HAL_RCC_ClockConfig+0x6a>
 8000eac:	e089      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d107      	bne.n	8000ec6 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb6:	4b63      	ldr	r3, [pc, #396]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	029b      	lsls	r3, r3, #10
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d120      	bne.n	8000f04 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e0b7      	b.n	8001036 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d107      	bne.n	8000ede <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ece:	4b5d      	ldr	r3, [pc, #372]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	049b      	lsls	r3, r3, #18
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d114      	bne.n	8000f04 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e0ab      	b.n	8001036 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d107      	bne.n	8000ef6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000ee6:	4b57      	ldr	r3, [pc, #348]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	025b      	lsls	r3, r3, #9
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d108      	bne.n	8000f04 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e09f      	b.n	8001036 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef6:	4b53      	ldr	r3, [pc, #332]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2202      	movs	r2, #2
 8000efc:	4013      	ands	r3, r2
 8000efe:	d101      	bne.n	8000f04 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e098      	b.n	8001036 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f04:	4b4f      	ldr	r3, [pc, #316]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4393      	bics	r3, r2
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000f14:	430a      	orrs	r2, r1
 8000f16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f18:	f7ff f9be 	bl	8000298 <HAL_GetTick>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d111      	bne.n	8000f4c <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f28:	e009      	b.n	8000f3e <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f2a:	f7ff f9b5 	bl	8000298 <HAL_GetTick>
 8000f2e:	0002      	movs	r2, r0
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	4a44      	ldr	r2, [pc, #272]	; (8001048 <HAL_RCC_ClockConfig+0x204>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e07b      	b.n	8001036 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	220c      	movs	r2, #12
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d1ef      	bne.n	8000f2a <HAL_RCC_ClockConfig+0xe6>
 8000f4a:	e03a      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d111      	bne.n	8000f78 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f54:	e009      	b.n	8000f6a <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f56:	f7ff f99f 	bl	8000298 <HAL_GetTick>
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	4a39      	ldr	r2, [pc, #228]	; (8001048 <HAL_RCC_ClockConfig+0x204>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e065      	b.n	8001036 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f6a:	4b36      	ldr	r3, [pc, #216]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	220c      	movs	r2, #12
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d1ef      	bne.n	8000f56 <HAL_RCC_ClockConfig+0x112>
 8000f76:	e024      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d11b      	bne.n	8000fb8 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000f80:	e009      	b.n	8000f96 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f82:	f7ff f989 	bl	8000298 <HAL_GetTick>
 8000f86:	0002      	movs	r2, r0
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	4a2e      	ldr	r2, [pc, #184]	; (8001048 <HAL_RCC_ClockConfig+0x204>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e04f      	b.n	8001036 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000f96:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b0c      	cmp	r3, #12
 8000fa0:	d1ef      	bne.n	8000f82 <HAL_RCC_ClockConfig+0x13e>
 8000fa2:	e00e      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fa4:	f7ff f978 	bl	8000298 <HAL_GetTick>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	4a26      	ldr	r2, [pc, #152]	; (8001048 <HAL_RCC_ClockConfig+0x204>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e03e      	b.n	8001036 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <HAL_RCC_ClockConfig+0x1fc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4013      	ands	r3, r2
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d211      	bcs.n	8000ff4 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_RCC_ClockConfig+0x1fc>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4393      	bics	r3, r2
 8000fd8:	0019      	movs	r1, r3
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_RCC_ClockConfig+0x1fc>)
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_RCC_ClockConfig+0x1fc>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4013      	ands	r3, r2
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d001      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e020      	b.n	8001036 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d009      	beq.n	8001012 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <HAL_RCC_ClockConfig+0x208>)
 8001004:	4013      	ands	r3, r2
 8001006:	0019      	movs	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 800100e:	430a      	orrs	r2, r1
 8001010:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001012:	f000 f821 	bl	8001058 <HAL_RCC_GetSysClockFreq>
 8001016:	0001      	movs	r1, r0
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_RCC_ClockConfig+0x200>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	220f      	movs	r2, #15
 8001020:	4013      	ands	r3, r2
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <HAL_RCC_ClockConfig+0x20c>)
 8001024:	5cd3      	ldrb	r3, [r2, r3]
 8001026:	000a      	movs	r2, r1
 8001028:	40da      	lsrs	r2, r3
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_RCC_ClockConfig+0x210>)
 800102c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff f90a 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	40022000 	.word	0x40022000
 8001044:	40021000 	.word	0x40021000
 8001048:	00001388 	.word	0x00001388
 800104c:	fffff8ff 	.word	0xfffff8ff
 8001050:	080022d8 	.word	0x080022d8
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b08f      	sub	sp, #60	; 0x3c
 800105c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800105e:	2314      	movs	r3, #20
 8001060:	18fb      	adds	r3, r7, r3
 8001062:	4a37      	ldr	r2, [pc, #220]	; (8001140 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001064:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001066:	c313      	stmia	r3!, {r0, r1, r4}
 8001068:	6812      	ldr	r2, [r2, #0]
 800106a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4a35      	ldr	r2, [pc, #212]	; (8001144 <HAL_RCC_GetSysClockFreq+0xec>)
 8001070:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001072:	c313      	stmia	r3!, {r0, r1, r4}
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001080:	2300      	movs	r3, #0
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf0>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001094:	220c      	movs	r2, #12
 8001096:	4013      	ands	r3, r2
 8001098:	2b08      	cmp	r3, #8
 800109a:	d006      	beq.n	80010aa <HAL_RCC_GetSysClockFreq+0x52>
 800109c:	2b0c      	cmp	r3, #12
 800109e:	d043      	beq.n	8001128 <HAL_RCC_GetSysClockFreq+0xd0>
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d144      	bne.n	800112e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010a4:	4b29      	ldr	r3, [pc, #164]	; (800114c <HAL_RCC_GetSysClockFreq+0xf4>)
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010a8:	e044      	b.n	8001134 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80010aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ac:	0c9b      	lsrs	r3, r3, #18
 80010ae:	220f      	movs	r2, #15
 80010b0:	4013      	ands	r3, r2
 80010b2:	2214      	movs	r2, #20
 80010b4:	18ba      	adds	r2, r7, r2
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <HAL_RCC_GetSysClockFreq+0xf0>)
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	220f      	movs	r2, #15
 80010c0:	4013      	ands	r3, r2
 80010c2:	1d3a      	adds	r2, r7, #4
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80010c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ca:	23c0      	movs	r3, #192	; 0xc0
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	401a      	ands	r2, r3
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	025b      	lsls	r3, r3, #9
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d109      	bne.n	80010ec <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80010d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010da:	481c      	ldr	r0, [pc, #112]	; (800114c <HAL_RCC_GetSysClockFreq+0xf4>)
 80010dc:	f7ff f814 	bl	8000108 <__udivsi3>
 80010e0:	0003      	movs	r3, r0
 80010e2:	001a      	movs	r2, r3
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	4353      	muls	r3, r2
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
 80010ea:	e01a      	b.n	8001122 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80010ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ee:	23c0      	movs	r3, #192	; 0xc0
 80010f0:	025b      	lsls	r3, r3, #9
 80010f2:	401a      	ands	r2, r3
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	025b      	lsls	r3, r3, #9
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d109      	bne.n	8001110 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80010fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010fe:	4814      	ldr	r0, [pc, #80]	; (8001150 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001100:	f7ff f802 	bl	8000108 <__udivsi3>
 8001104:	0003      	movs	r3, r0
 8001106:	001a      	movs	r2, r3
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	4353      	muls	r3, r2
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
 800110e:	e008      	b.n	8001122 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001114:	f7fe fff8 	bl	8000108 <__udivsi3>
 8001118:	0003      	movs	r3, r0
 800111a:	001a      	movs	r2, r3
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	4353      	muls	r3, r2
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001126:	e005      	b.n	8001134 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_RCC_GetSysClockFreq+0xf8>)
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800112c:	e002      	b.n	8001134 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001132:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001136:	0018      	movs	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	b00f      	add	sp, #60	; 0x3c
 800113c:	bd90      	pop	{r4, r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	080022b8 	.word	0x080022b8
 8001144:	080022c8 	.word	0x080022c8
 8001148:	40021000 	.word	0x40021000
 800114c:	007a1200 	.word	0x007a1200
 8001150:	02dc6c00 	.word	0x02dc6c00

08001154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <HAL_RCC_GetHCLKFreq+0x10>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	20000000 	.word	0x20000000

08001168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800116c:	f7ff fff2 	bl	8001154 <HAL_RCC_GetHCLKFreq>
 8001170:	0001      	movs	r1, r0
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	2207      	movs	r2, #7
 800117a:	4013      	ands	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	40d9      	lsrs	r1, r3
 8001182:	000b      	movs	r3, r1
}    
 8001184:	0018      	movs	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	40021000 	.word	0x40021000
 8001190:	080022e8 	.word	0x080022e8

08001194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	025b      	lsls	r3, r3, #9
 80011ac:	4013      	ands	r3, r2
 80011ae:	d100      	bne.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80011b0:	e08f      	b.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80011b2:	2317      	movs	r3, #23
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ba:	4b6f      	ldr	r3, [pc, #444]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	055b      	lsls	r3, r3, #21
 80011c2:	4013      	ands	r3, r2
 80011c4:	d111      	bne.n	80011ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b6c      	ldr	r3, [pc, #432]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80011c8:	69da      	ldr	r2, [r3, #28]
 80011ca:	4b6b      	ldr	r3, [pc, #428]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	0549      	lsls	r1, r1, #21
 80011d0:	430a      	orrs	r2, r1
 80011d2:	61da      	str	r2, [r3, #28]
 80011d4:	4b68      	ldr	r3, [pc, #416]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80011d6:	69da      	ldr	r2, [r3, #28]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	055b      	lsls	r3, r3, #21
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011e2:	2317      	movs	r3, #23
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ea:	4b64      	ldr	r3, [pc, #400]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4013      	ands	r3, r2
 80011f4:	d11a      	bne.n	800122c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f6:	4b61      	ldr	r3, [pc, #388]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b60      	ldr	r3, [pc, #384]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	0049      	lsls	r1, r1, #1
 8001200:	430a      	orrs	r2, r1
 8001202:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001204:	f7ff f848 	bl	8000298 <HAL_GetTick>
 8001208:	0003      	movs	r3, r0
 800120a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	e008      	b.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120e:	f7ff f843 	bl	8000298 <HAL_GetTick>
 8001212:	0002      	movs	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b64      	cmp	r3, #100	; 0x64
 800121a:	d901      	bls.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e0a6      	b.n	800136e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	4b56      	ldr	r3, [pc, #344]	; (800137c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4013      	ands	r3, r2
 800122a:	d0f0      	beq.n	800120e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800122c:	4b52      	ldr	r3, [pc, #328]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800122e:	6a1a      	ldr	r2, [r3, #32]
 8001230:	23c0      	movs	r3, #192	; 0xc0
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d034      	beq.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	23c0      	movs	r3, #192	; 0xc0
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4013      	ands	r3, r2
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	429a      	cmp	r2, r3
 800124c:	d02c      	beq.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a4b      	ldr	r2, [pc, #300]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001258:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	4b46      	ldr	r3, [pc, #280]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	0249      	lsls	r1, r1, #9
 8001262:	430a      	orrs	r2, r1
 8001264:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001268:	6a1a      	ldr	r2, [r3, #32]
 800126a:	4b43      	ldr	r3, [pc, #268]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800126c:	4945      	ldr	r1, [pc, #276]	; (8001384 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800126e:	400a      	ands	r2, r1
 8001270:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2201      	movs	r2, #1
 800127c:	4013      	ands	r3, r2
 800127e:	d013      	beq.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff f80a 	bl	8000298 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001288:	e009      	b.n	800129e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128a:	f7ff f805 	bl	8000298 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	4a3c      	ldr	r2, [pc, #240]	; (8001388 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d901      	bls.n	800129e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e067      	b.n	800136e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129e:	4b36      	ldr	r3, [pc, #216]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	2202      	movs	r2, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	d0f0      	beq.n	800128a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012a8:	4b33      	ldr	r3, [pc, #204]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4a34      	ldr	r2, [pc, #208]	; (8001380 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012bc:	2317      	movs	r3, #23
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d105      	bne.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012c8:	69da      	ldr	r2, [r3, #28]
 80012ca:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012cc:	492f      	ldr	r1, [pc, #188]	; (800138c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80012ce:	400a      	ands	r2, r1
 80012d0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2201      	movs	r2, #1
 80012d8:	4013      	ands	r3, r2
 80012da:	d009      	beq.n	80012f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	2203      	movs	r2, #3
 80012e2:	4393      	bics	r3, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012ec:	430a      	orrs	r2, r1
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2202      	movs	r2, #2
 80012f6:	4013      	ands	r3, r2
 80012f8:	d009      	beq.n	800130e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a24      	ldr	r2, [pc, #144]	; (8001390 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001300:	4013      	ands	r3, r2
 8001302:	0019      	movs	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800130a:	430a      	orrs	r2, r1
 800130c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2220      	movs	r2, #32
 8001314:	4013      	ands	r3, r2
 8001316:	d009      	beq.n	800132c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	2210      	movs	r2, #16
 800131e:	4393      	bics	r3, r2
 8001320:	0019      	movs	r1, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001328:	430a      	orrs	r2, r1
 800132a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	029b      	lsls	r3, r3, #10
 8001334:	4013      	ands	r3, r2
 8001336:	d009      	beq.n	800134c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	4393      	bics	r3, r2
 8001340:	0019      	movs	r1, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699a      	ldr	r2, [r3, #24]
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001348:	430a      	orrs	r2, r1
 800134a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4013      	ands	r3, r2
 8001356:	d009      	beq.n	800136c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	2240      	movs	r2, #64	; 0x40
 800135e:	4393      	bics	r3, r2
 8001360:	0019      	movs	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001368:	430a      	orrs	r2, r1
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	0018      	movs	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	b006      	add	sp, #24
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	40021000 	.word	0x40021000
 800137c:	40007000 	.word	0x40007000
 8001380:	fffffcff 	.word	0xfffffcff
 8001384:	fffeffff 	.word	0xfffeffff
 8001388:	00001388 	.word	0x00001388
 800138c:	efffffff 	.word	0xefffffff
 8001390:	fffcffff 	.word	0xfffcffff

08001394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e047      	b.n	8001436 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2269      	movs	r2, #105	; 0x69
 80013aa:	5c9b      	ldrb	r3, [r3, r2]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d107      	bne.n	80013c2 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2268      	movs	r2, #104	; 0x68
 80013b6:	2100      	movs	r1, #0
 80013b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0018      	movs	r0, r3
 80013be:	f000 fe65 	bl	800208c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2269      	movs	r2, #105	; 0x69
 80013c6:	2124      	movs	r1, #36	; 0x24
 80013c8:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	438a      	bics	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	0018      	movs	r0, r3
 80013de:	f000 f831 	bl	8001444 <UART_SetConfig>
 80013e2:	0003      	movs	r3, r0
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e024      	b.n	8001436 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	0018      	movs	r0, r3
 80013f8:	f000 f9e0 	bl	80017bc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	490e      	ldr	r1, [pc, #56]	; (8001440 <HAL_UART_Init+0xac>)
 8001408:	400a      	ands	r2, r1
 800140a:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	212a      	movs	r1, #42	; 0x2a
 8001418:	438a      	bics	r2, r1
 800141a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2101      	movs	r1, #1
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	0018      	movs	r0, r3
 8001430:	f000 fa78 	bl	8001924 <UART_CheckIdleState>
 8001434:	0003      	movs	r3, r0
}
 8001436:	0018      	movs	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	ffffb7ff 	.word	0xffffb7ff

08001444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001450:	2317      	movs	r3, #23
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	2210      	movs	r2, #16
 8001456:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001458:	230a      	movs	r3, #10
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	2200      	movs	r2, #0
 800145e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001460:	2314      	movs	r3, #20
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	2200      	movs	r2, #0
 8001466:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001468:	2313      	movs	r3, #19
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	4313      	orrs	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4ac1      	ldr	r2, [pc, #772]	; (8001794 <UART_SetConfig+0x350>)
 8001490:	4013      	ands	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4abc      	ldr	r2, [pc, #752]	; (8001798 <UART_SetConfig+0x354>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4313      	orrs	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4ab4      	ldr	r2, [pc, #720]	; (800179c <UART_SetConfig+0x358>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	0019      	movs	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4ab0      	ldr	r2, [pc, #704]	; (80017a0 <UART_SetConfig+0x35c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d125      	bne.n	800152e <UART_SetConfig+0xea>
 80014e2:	4bb0      	ldr	r3, [pc, #704]	; (80017a4 <UART_SetConfig+0x360>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	2203      	movs	r2, #3
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d00f      	beq.n	800150e <UART_SetConfig+0xca>
 80014ee:	d304      	bcc.n	80014fa <UART_SetConfig+0xb6>
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d011      	beq.n	8001518 <UART_SetConfig+0xd4>
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d005      	beq.n	8001504 <UART_SetConfig+0xc0>
 80014f8:	e013      	b.n	8001522 <UART_SetConfig+0xde>
 80014fa:	2317      	movs	r3, #23
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	e064      	b.n	80015ce <UART_SetConfig+0x18a>
 8001504:	2317      	movs	r3, #23
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	2202      	movs	r2, #2
 800150a:	701a      	strb	r2, [r3, #0]
 800150c:	e05f      	b.n	80015ce <UART_SetConfig+0x18a>
 800150e:	2317      	movs	r3, #23
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	2204      	movs	r2, #4
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	e05a      	b.n	80015ce <UART_SetConfig+0x18a>
 8001518:	2317      	movs	r3, #23
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	2208      	movs	r2, #8
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e055      	b.n	80015ce <UART_SetConfig+0x18a>
 8001522:	2317      	movs	r3, #23
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	2210      	movs	r2, #16
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	e04f      	b.n	80015ce <UART_SetConfig+0x18a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a9d      	ldr	r2, [pc, #628]	; (80017a8 <UART_SetConfig+0x364>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d132      	bne.n	800159e <UART_SetConfig+0x15a>
 8001538:	4b9a      	ldr	r3, [pc, #616]	; (80017a4 <UART_SetConfig+0x360>)
 800153a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800153c:	23c0      	movs	r3, #192	; 0xc0
 800153e:	029b      	lsls	r3, r3, #10
 8001540:	4013      	ands	r3, r2
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	0252      	lsls	r2, r2, #9
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <UART_SetConfig+0x13a>
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	0252      	lsls	r2, r2, #9
 800154e:	4293      	cmp	r3, r2
 8001550:	d802      	bhi.n	8001558 <UART_SetConfig+0x114>
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <UART_SetConfig+0x126>
 8001556:	e01c      	b.n	8001592 <UART_SetConfig+0x14e>
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	0292      	lsls	r2, r2, #10
 800155c:	4293      	cmp	r3, r2
 800155e:	d013      	beq.n	8001588 <UART_SetConfig+0x144>
 8001560:	22c0      	movs	r2, #192	; 0xc0
 8001562:	0292      	lsls	r2, r2, #10
 8001564:	4293      	cmp	r3, r2
 8001566:	d005      	beq.n	8001574 <UART_SetConfig+0x130>
 8001568:	e013      	b.n	8001592 <UART_SetConfig+0x14e>
 800156a:	2317      	movs	r3, #23
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
 8001572:	e02c      	b.n	80015ce <UART_SetConfig+0x18a>
 8001574:	2317      	movs	r3, #23
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	2202      	movs	r2, #2
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e027      	b.n	80015ce <UART_SetConfig+0x18a>
 800157e:	2317      	movs	r3, #23
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2204      	movs	r2, #4
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e022      	b.n	80015ce <UART_SetConfig+0x18a>
 8001588:	2317      	movs	r3, #23
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	2208      	movs	r2, #8
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	e01d      	b.n	80015ce <UART_SetConfig+0x18a>
 8001592:	2317      	movs	r3, #23
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	2210      	movs	r2, #16
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	e017      	b.n	80015ce <UART_SetConfig+0x18a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a82      	ldr	r2, [pc, #520]	; (80017ac <UART_SetConfig+0x368>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d104      	bne.n	80015b2 <UART_SetConfig+0x16e>
 80015a8:	2317      	movs	r3, #23
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	e00d      	b.n	80015ce <UART_SetConfig+0x18a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a7e      	ldr	r2, [pc, #504]	; (80017b0 <UART_SetConfig+0x36c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d104      	bne.n	80015c6 <UART_SetConfig+0x182>
 80015bc:	2317      	movs	r3, #23
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	e003      	b.n	80015ce <UART_SetConfig+0x18a>
 80015c6:	2317      	movs	r3, #23
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	2210      	movs	r2, #16
 80015cc:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d000      	beq.n	80015dc <UART_SetConfig+0x198>
 80015da:	e077      	b.n	80016cc <UART_SetConfig+0x288>
  {
    switch (clocksource)
 80015dc:	2317      	movs	r3, #23
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d01c      	beq.n	8001620 <UART_SetConfig+0x1dc>
 80015e6:	dc02      	bgt.n	80015ee <UART_SetConfig+0x1aa>
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <UART_SetConfig+0x1b4>
 80015ec:	e04f      	b.n	800168e <UART_SetConfig+0x24a>
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d027      	beq.n	8001642 <UART_SetConfig+0x1fe>
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d039      	beq.n	800166a <UART_SetConfig+0x226>
 80015f6:	e04a      	b.n	800168e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80015f8:	f7ff fdb6 	bl	8001168 <HAL_RCC_GetPCLK1Freq>
 80015fc:	0003      	movs	r3, r0
 80015fe:	005a      	lsls	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	085b      	lsrs	r3, r3, #1
 8001606:	18d2      	adds	r2, r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	0019      	movs	r1, r3
 800160e:	0010      	movs	r0, r2
 8001610:	f7fe fd7a 	bl	8000108 <__udivsi3>
 8001614:	0003      	movs	r3, r0
 8001616:	001a      	movs	r2, r3
 8001618:	2314      	movs	r3, #20
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	801a      	strh	r2, [r3, #0]
        break;
 800161e:	e03b      	b.n	8001698 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	4a63      	ldr	r2, [pc, #396]	; (80017b4 <UART_SetConfig+0x370>)
 8001628:	189a      	adds	r2, r3, r2
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	0019      	movs	r1, r3
 8001630:	0010      	movs	r0, r2
 8001632:	f7fe fd69 	bl	8000108 <__udivsi3>
 8001636:	0003      	movs	r3, r0
 8001638:	001a      	movs	r2, r3
 800163a:	2314      	movs	r3, #20
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	801a      	strh	r2, [r3, #0]
        break;
 8001640:	e02a      	b.n	8001698 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001642:	f7ff fd09 	bl	8001058 <HAL_RCC_GetSysClockFreq>
 8001646:	0003      	movs	r3, r0
 8001648:	005a      	lsls	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	085b      	lsrs	r3, r3, #1
 8001650:	18d2      	adds	r2, r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	0019      	movs	r1, r3
 8001658:	0010      	movs	r0, r2
 800165a:	f7fe fd55 	bl	8000108 <__udivsi3>
 800165e:	0003      	movs	r3, r0
 8001660:	001a      	movs	r2, r3
 8001662:	2314      	movs	r3, #20
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	801a      	strh	r2, [r3, #0]
        break;
 8001668:	e016      	b.n	8001698 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0252      	lsls	r2, r2, #9
 8001674:	189a      	adds	r2, r3, r2
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	0019      	movs	r1, r3
 800167c:	0010      	movs	r0, r2
 800167e:	f7fe fd43 	bl	8000108 <__udivsi3>
 8001682:	0003      	movs	r3, r0
 8001684:	001a      	movs	r2, r3
 8001686:	2314      	movs	r3, #20
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	801a      	strh	r2, [r3, #0]
        break;
 800168c:	e004      	b.n	8001698 <UART_SetConfig+0x254>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800168e:	2313      	movs	r3, #19
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
        break;
 8001696:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001698:	200a      	movs	r0, #10
 800169a:	183b      	adds	r3, r7, r0
 800169c:	2414      	movs	r4, #20
 800169e:	193a      	adds	r2, r7, r4
 80016a0:	8812      	ldrh	r2, [r2, #0]
 80016a2:	210f      	movs	r1, #15
 80016a4:	438a      	bics	r2, r1
 80016a6:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016a8:	193b      	adds	r3, r7, r4
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	105b      	asrs	r3, r3, #1
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	2207      	movs	r2, #7
 80016b2:	4013      	ands	r3, r2
 80016b4:	b299      	uxth	r1, r3
 80016b6:	183b      	adds	r3, r7, r0
 80016b8:	183a      	adds	r2, r7, r0
 80016ba:	8812      	ldrh	r2, [r2, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	183a      	adds	r2, r7, r0
 80016c6:	8812      	ldrh	r2, [r2, #0]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	e05b      	b.n	8001784 <UART_SetConfig+0x340>
  }
  else
  {
    switch (clocksource)
 80016cc:	2317      	movs	r3, #23
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d01b      	beq.n	800170e <UART_SetConfig+0x2ca>
 80016d6:	dc02      	bgt.n	80016de <UART_SetConfig+0x29a>
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <UART_SetConfig+0x2a4>
 80016dc:	e04d      	b.n	800177a <UART_SetConfig+0x336>
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d026      	beq.n	8001730 <UART_SetConfig+0x2ec>
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d037      	beq.n	8001756 <UART_SetConfig+0x312>
 80016e6:	e048      	b.n	800177a <UART_SetConfig+0x336>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80016e8:	f7ff fd3e 	bl	8001168 <HAL_RCC_GetPCLK1Freq>
 80016ec:	0002      	movs	r2, r0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	18d2      	adds	r2, r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	0019      	movs	r1, r3
 80016fc:	0010      	movs	r0, r2
 80016fe:	f7fe fd03 	bl	8000108 <__udivsi3>
 8001702:	0003      	movs	r3, r0
 8001704:	b29a      	uxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60da      	str	r2, [r3, #12]
        break;
 800170c:	e03a      	b.n	8001784 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <UART_SetConfig+0x374>)
 8001716:	189a      	adds	r2, r3, r2
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	0019      	movs	r1, r3
 800171e:	0010      	movs	r0, r2
 8001720:	f7fe fcf2 	bl	8000108 <__udivsi3>
 8001724:	0003      	movs	r3, r0
 8001726:	b29a      	uxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60da      	str	r2, [r3, #12]
        break;
 800172e:	e029      	b.n	8001784 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001730:	f7ff fc92 	bl	8001058 <HAL_RCC_GetSysClockFreq>
 8001734:	0002      	movs	r2, r0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	18d2      	adds	r2, r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	0019      	movs	r1, r3
 8001744:	0010      	movs	r0, r2
 8001746:	f7fe fcdf 	bl	8000108 <__udivsi3>
 800174a:	0003      	movs	r3, r0
 800174c:	b29a      	uxth	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	60da      	str	r2, [r3, #12]
        break;
 8001754:	e016      	b.n	8001784 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	0212      	lsls	r2, r2, #8
 8001760:	189a      	adds	r2, r3, r2
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	0019      	movs	r1, r3
 8001768:	0010      	movs	r0, r2
 800176a:	f7fe fccd 	bl	8000108 <__udivsi3>
 800176e:	0003      	movs	r3, r0
 8001770:	b29a      	uxth	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60da      	str	r2, [r3, #12]
        break;
 8001778:	e004      	b.n	8001784 <UART_SetConfig+0x340>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800177a:	2313      	movs	r3, #19
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
        break;
 8001782:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8001784:	2313      	movs	r3, #19
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	781b      	ldrb	r3, [r3, #0]

}
 800178a:	0018      	movs	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	b007      	add	sp, #28
 8001790:	bd90      	pop	{r4, r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	efff69f3 	.word	0xefff69f3
 8001798:	ffffcfff 	.word	0xffffcfff
 800179c:	fffff4ff 	.word	0xfffff4ff
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40004400 	.word	0x40004400
 80017ac:	40004800 	.word	0x40004800
 80017b0:	40004c00 	.word	0x40004c00
 80017b4:	00f42400 	.word	0x00f42400
 80017b8:	007a1200 	.word	0x007a1200

080017bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	2201      	movs	r2, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	d00b      	beq.n	80017e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4a4a      	ldr	r2, [pc, #296]	; (8001900 <UART_AdvFeatureConfig+0x144>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d00b      	beq.n	8001808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a43      	ldr	r2, [pc, #268]	; (8001904 <UART_AdvFeatureConfig+0x148>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2204      	movs	r2, #4
 800180e:	4013      	ands	r3, r2
 8001810:	d00b      	beq.n	800182a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a3b      	ldr	r2, [pc, #236]	; (8001908 <UART_AdvFeatureConfig+0x14c>)
 800181a:	4013      	ands	r3, r2
 800181c:	0019      	movs	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	2208      	movs	r2, #8
 8001830:	4013      	ands	r3, r2
 8001832:	d00b      	beq.n	800184c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4a34      	ldr	r2, [pc, #208]	; (800190c <UART_AdvFeatureConfig+0x150>)
 800183c:	4013      	ands	r3, r2
 800183e:	0019      	movs	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	2210      	movs	r2, #16
 8001852:	4013      	ands	r3, r2
 8001854:	d00b      	beq.n	800186e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a2c      	ldr	r2, [pc, #176]	; (8001910 <UART_AdvFeatureConfig+0x154>)
 800185e:	4013      	ands	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	2220      	movs	r2, #32
 8001874:	4013      	ands	r3, r2
 8001876:	d00b      	beq.n	8001890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4a25      	ldr	r2, [pc, #148]	; (8001914 <UART_AdvFeatureConfig+0x158>)
 8001880:	4013      	ands	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	2240      	movs	r2, #64	; 0x40
 8001896:	4013      	ands	r3, r2
 8001898:	d01d      	beq.n	80018d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <UART_AdvFeatureConfig+0x15c>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	035b      	lsls	r3, r3, #13
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d10b      	bne.n	80018d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a15      	ldr	r2, [pc, #84]	; (800191c <UART_AdvFeatureConfig+0x160>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	4013      	ands	r3, r2
 80018de:	d00b      	beq.n	80018f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <UART_AdvFeatureConfig+0x164>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	0019      	movs	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	605a      	str	r2, [r3, #4]
  }
}
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b002      	add	sp, #8
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	fffdffff 	.word	0xfffdffff
 8001904:	fffeffff 	.word	0xfffeffff
 8001908:	fffbffff 	.word	0xfffbffff
 800190c:	ffff7fff 	.word	0xffff7fff
 8001910:	ffffefff 	.word	0xffffefff
 8001914:	ffffdfff 	.word	0xffffdfff
 8001918:	ffefffff 	.word	0xffefffff
 800191c:	ff9fffff 	.word	0xff9fffff
 8001920:	fff7ffff 	.word	0xfff7ffff

08001924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af02      	add	r7, sp, #8
 800192a:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001936:	f7fe fcaf 	bl	8000298 <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <UART_CheckIdleState+0xa4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d004      	beq.n	8001952 <UART_CheckIdleState+0x2e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <UART_CheckIdleState+0xa8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d129      	bne.n	80019a6 <UART_CheckIdleState+0x82>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2208      	movs	r2, #8
 800195a:	4013      	ands	r3, r2
 800195c:	2b08      	cmp	r3, #8
 800195e:	d10d      	bne.n	800197c <UART_CheckIdleState+0x58>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	0399      	lsls	r1, r3, #14
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <UART_CheckIdleState+0xac>)
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	0013      	movs	r3, r2
 800196e:	2200      	movs	r2, #0
 8001970:	f000 f830 	bl	80019d4 <UART_WaitOnFlagUntilTimeout>
 8001974:	1e03      	subs	r3, r0, #0
 8001976:	d001      	beq.n	800197c <UART_CheckIdleState+0x58>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e021      	b.n	80019c0 <UART_CheckIdleState+0x9c>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2204      	movs	r2, #4
 8001984:	4013      	ands	r3, r2
 8001986:	2b04      	cmp	r3, #4
 8001988:	d10d      	bne.n	80019a6 <UART_CheckIdleState+0x82>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	03d9      	lsls	r1, r3, #15
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <UART_CheckIdleState+0xac>)
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	0013      	movs	r3, r2
 8001998:	2200      	movs	r2, #0
 800199a:	f000 f81b 	bl	80019d4 <UART_WaitOnFlagUntilTimeout>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d001      	beq.n	80019a6 <UART_CheckIdleState+0x82>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e00c      	b.n	80019c0 <UART_CheckIdleState+0x9c>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2269      	movs	r2, #105	; 0x69
 80019aa:	2120      	movs	r1, #32
 80019ac:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	226a      	movs	r2, #106	; 0x6a
 80019b2:	2120      	movs	r1, #32
 80019b4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2268      	movs	r2, #104	; 0x68
 80019ba:	2100      	movs	r1, #0
 80019bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b004      	add	sp, #16
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40013800 	.word	0x40013800
 80019cc:	40004400 	.word	0x40004400
 80019d0:	01ffffff 	.word	0x01ffffff

080019d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019e4:	e02b      	b.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3301      	adds	r3, #1
 80019ea:	d028      	beq.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <UART_WaitOnFlagUntilTimeout+0x2e>
 80019f2:	f7fe fc51 	bl	8000298 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d21d      	bcs.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4916      	ldr	r1, [pc, #88]	; (8001a68 <UART_WaitOnFlagUntilTimeout+0x94>)
 8001a0e:	400a      	ands	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	438a      	bics	r2, r1
 8001a20:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2269      	movs	r2, #105	; 0x69
 8001a26:	2120      	movs	r1, #32
 8001a28:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	226a      	movs	r2, #106	; 0x6a
 8001a2e:	2120      	movs	r1, #32
 8001a30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2268      	movs	r2, #104	; 0x68
 8001a36:	2100      	movs	r1, #0
 8001a38:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e00f      	b.n	8001a5e <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	4013      	ands	r3, r2
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	425a      	negs	r2, r3
 8001a4e:	4153      	adcs	r3, r2
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	001a      	movs	r2, r3
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d0c4      	beq.n	80019e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b004      	add	sp, #16
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	fffffe5f 	.word	0xfffffe5f

08001a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0aa      	sub	sp, #168	; 0xa8
 8001a70:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a72:	f7fe fbd5 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a76:	f000 f8a5 	bl	8001bc4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a7a:	f000 f937 	bl	8001cec <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001a7e:	f000 f901 	bl	8001c84 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  static constexpr uint8_t NUM_LEDS = 50;
  LED_STRIP_WS2811<NUM_LEDS> ledStrip;
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	0018      	movs	r0, r3
 8001a86:	f000 f9b4 	bl	8001df2 <_ZN16LED_STRIP_WS2811ILt50EEC1Ev>
  ledStrip.writeEntireStrip(0xFF, 0, 0xFF);
 8001a8a:	1d38      	adds	r0, r7, #4
 8001a8c:	23ff      	movs	r3, #255	; 0xff
 8001a8e:	2200      	movs	r2, #0
 8001a90:	21ff      	movs	r1, #255	; 0xff
 8001a92:	f000 f9c9 	bl	8001e28 <_ZN16LED_STRIP_WS2811ILt50EE16writeEntireStripEhhh>
  ledStrip.display();
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 fa07 	bl	8001eac <_ZN16LED_STRIP_WS2811ILt50EE7displayEv>
  HAL_Delay(5000);
 8001a9e:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <main+0x154>)
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7fe fc03 	bl	80002ac <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int j = 0; j < 3; j++ )
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	22a4      	movs	r2, #164	; 0xa4
 8001aaa:	18ba      	adds	r2, r7, r2
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	23a4      	movs	r3, #164	; 0xa4
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	dcf6      	bgt.n	8001aa6 <main+0x3a>
	  {
	      // Fade IN
	      for(int k = 0; k < 256; k++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	22a0      	movs	r2, #160	; 0xa0
 8001abc:	18ba      	adds	r2, r7, r2
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	23a0      	movs	r3, #160	; 0xa0
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2bff      	cmp	r3, #255	; 0xff
 8001ac8:	dc34      	bgt.n	8001b34 <main+0xc8>
	      {
	        switch(j)
 8001aca:	23a4      	movs	r3, #164	; 0xa4
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d00d      	beq.n	8001af0 <main+0x84>
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d015      	beq.n	8001b04 <main+0x98>
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11d      	bne.n	8001b18 <main+0xac>
	        {
	          case 0:
			  {
				  ledStrip.writeEntireStrip(k, 0, 0);
 8001adc:	23a0      	movs	r3, #160	; 0xa0
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b2d9      	uxtb	r1, r3
 8001ae4:	1d38      	adds	r0, r7, #4
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f000 f99d 	bl	8001e28 <_ZN16LED_STRIP_WS2811ILt50EE16writeEntireStripEhhh>
				  break;
 8001aee:	e013      	b.n	8001b18 <main+0xac>
			  }
	          case 1:
	          {
	        	  ledStrip.writeEntireStrip(0, k, 0);
 8001af0:	23a0      	movs	r3, #160	; 0xa0
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	1d38      	adds	r0, r7, #4
 8001afa:	2300      	movs	r3, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	f000 f993 	bl	8001e28 <_ZN16LED_STRIP_WS2811ILt50EE16writeEntireStripEhhh>
	        	  break;
 8001b02:	e009      	b.n	8001b18 <main+0xac>
	          }
	          case 2:
	          {
	        	  ledStrip.writeEntireStrip(0, 0, k);
 8001b04:	23a0      	movs	r3, #160	; 0xa0
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	1d38      	adds	r0, r7, #4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	f000 f989 	bl	8001e28 <_ZN16LED_STRIP_WS2811ILt50EE16writeEntireStripEhhh>
	        	  break;
 8001b16:	46c0      	nop			; (mov r8, r8)
	          }
	        }
	        ledStrip.display();
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 f9c6 	bl	8001eac <_ZN16LED_STRIP_WS2811ILt50EE7displayEv>
	        HAL_Delay(3);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f7fe fbc3 	bl	80002ac <HAL_Delay>
	      for(int k = 0; k < 256; k++)
 8001b26:	22a0      	movs	r2, #160	; 0xa0
 8001b28:	18bb      	adds	r3, r7, r2
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	18ba      	adds	r2, r7, r2
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e7c5      	b.n	8001ac0 <main+0x54>
	      }
	      // Fade OUT
	      for(int k = 254; k >= 0; k--)
 8001b34:	23fe      	movs	r3, #254	; 0xfe
 8001b36:	229c      	movs	r2, #156	; 0x9c
 8001b38:	18ba      	adds	r2, r7, r2
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	239c      	movs	r3, #156	; 0x9c
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db34      	blt.n	8001bb0 <main+0x144>
	      {
	        switch(j)
 8001b46:	23a4      	movs	r3, #164	; 0xa4
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d00d      	beq.n	8001b6c <main+0x100>
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d015      	beq.n	8001b80 <main+0x114>
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d11d      	bne.n	8001b94 <main+0x128>
	        {
	          case 0:
			  {
				  ledStrip.writeEntireStrip(k, 0, 0);
 8001b58:	239c      	movs	r3, #156	; 0x9c
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b2d9      	uxtb	r1, r3
 8001b60:	1d38      	adds	r0, r7, #4
 8001b62:	2300      	movs	r3, #0
 8001b64:	2200      	movs	r2, #0
 8001b66:	f000 f95f 	bl	8001e28 <_ZN16LED_STRIP_WS2811ILt50EE16writeEntireStripEhhh>
				  break;
 8001b6a:	e013      	b.n	8001b94 <main+0x128>
			  }
	          case 1:
	          {
	        	  ledStrip.writeEntireStrip(0, k, 0);
 8001b6c:	239c      	movs	r3, #156	; 0x9c
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	1d38      	adds	r0, r7, #4
 8001b76:	2300      	movs	r3, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	f000 f955 	bl	8001e28 <_ZN16LED_STRIP_WS2811ILt50EE16writeEntireStripEhhh>
	        	  break;
 8001b7e:	e009      	b.n	8001b94 <main+0x128>
	          }
	          case 2:
	          {
	        	  ledStrip.writeEntireStrip(0, 0, k);
 8001b80:	239c      	movs	r3, #156	; 0x9c
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	1d38      	adds	r0, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	f000 f94b 	bl	8001e28 <_ZN16LED_STRIP_WS2811ILt50EE16writeEntireStripEhhh>
	        	  break;
 8001b92:	46c0      	nop			; (mov r8, r8)
	          }
	        }
	        ledStrip.display();
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f988 	bl	8001eac <_ZN16LED_STRIP_WS2811ILt50EE7displayEv>
	        HAL_Delay(3);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f7fe fb85 	bl	80002ac <HAL_Delay>
	      for(int k = 254; k >= 0; k--)
 8001ba2:	229c      	movs	r2, #156	; 0x9c
 8001ba4:	18bb      	adds	r3, r7, r2
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	18ba      	adds	r2, r7, r2
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e7c5      	b.n	8001b3c <main+0xd0>
	  for(int j = 0; j < 3; j++ )
 8001bb0:	22a4      	movs	r2, #164	; 0xa4
 8001bb2:	18bb      	adds	r3, r7, r2
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	18ba      	adds	r2, r7, r2
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	e777      	b.n	8001aae <main+0x42>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	00001388 	.word	0x00001388

08001bc4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b099      	sub	sp, #100	; 0x64
 8001bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bca:	242c      	movs	r4, #44	; 0x2c
 8001bcc:	193b      	adds	r3, r7, r4
 8001bce:	0018      	movs	r0, r3
 8001bd0:	2334      	movs	r3, #52	; 0x34
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	f000 fb5a 	bl	800228e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bda:	231c      	movs	r3, #28
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	0018      	movs	r0, r3
 8001be0:	2310      	movs	r3, #16
 8001be2:	001a      	movs	r2, r3
 8001be4:	2100      	movs	r1, #0
 8001be6:	f000 fb52 	bl	800228e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bea:	003b      	movs	r3, r7
 8001bec:	0018      	movs	r0, r3
 8001bee:	231c      	movs	r3, #28
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	f000 fb4b 	bl	800228e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001bf8:	193b      	adds	r3, r7, r4
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001bfe:	193b      	adds	r3, r7, r4
 8001c00:	2201      	movs	r2, #1
 8001c02:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c04:	193b      	adds	r3, r7, r4
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0a:	193b      	adds	r3, r7, r4
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f7fe fdb9 	bl	8000784 <HAL_RCC_OscConfig>
 8001c12:	0003      	movs	r3, r0
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	4193      	sbcs	r3, r2
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8001c1e:	f000 f8e3 	bl	8001de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c22:	211c      	movs	r1, #28
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	2207      	movs	r2, #7
 8001c28:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001c2a:	187b      	adds	r3, r7, r1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	2101      	movs	r1, #1
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff f8ff 	bl	8000e44 <HAL_RCC_ClockConfig>
 8001c46:	0003      	movs	r3, r0
 8001c48:	1e5a      	subs	r2, r3, #1
 8001c4a:	4193      	sbcs	r3, r2
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8001c52:	f000 f8c9 	bl	8001de8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c56:	003b      	movs	r3, r7
 8001c58:	2202      	movs	r2, #2
 8001c5a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c5c:	003b      	movs	r3, r7
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c62:	003b      	movs	r3, r7
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff fa95 	bl	8001194 <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	1e5a      	subs	r2, r3, #1
 8001c6e:	4193      	sbcs	r3, r2
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001c76:	f000 f8b7 	bl	8001de8 <Error_Handler>
  }
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b019      	add	sp, #100	; 0x64
 8001c80:	bd90      	pop	{r4, r7, pc}
	...

08001c84 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001c90:	2296      	movs	r2, #150	; 0x96
 8001c92:	0212      	lsls	r2, r2, #8
 8001c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7ff fb63 	bl	8001394 <HAL_UART_Init>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	4193      	sbcs	r3, r2
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8001cda:	f000 f885 	bl	8001de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000020 	.word	0x20000020
 8001ce8:	40004400 	.word	0x40004400

08001cec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cec:	b590      	push	{r4, r7, lr}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf2:	240c      	movs	r4, #12
 8001cf4:	193b      	adds	r3, r7, r4
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	2314      	movs	r3, #20
 8001cfa:	001a      	movs	r2, r3
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	f000 fac6 	bl	800228e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d02:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <_ZL12MX_GPIO_Initv+0xf0>)
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	4b35      	ldr	r3, [pc, #212]	; (8001ddc <_ZL12MX_GPIO_Initv+0xf0>)
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	0309      	lsls	r1, r1, #12
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	615a      	str	r2, [r3, #20]
 8001d10:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <_ZL12MX_GPIO_Initv+0xf0>)
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	031b      	lsls	r3, r3, #12
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <_ZL12MX_GPIO_Initv+0xf0>)
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <_ZL12MX_GPIO_Initv+0xf0>)
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	03c9      	lsls	r1, r1, #15
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <_ZL12MX_GPIO_Initv+0xf0>)
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	03db      	lsls	r3, r3, #15
 8001d34:	4013      	ands	r3, r2
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <_ZL12MX_GPIO_Initv+0xf0>)
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <_ZL12MX_GPIO_Initv+0xf0>)
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	0289      	lsls	r1, r1, #10
 8001d44:	430a      	orrs	r2, r1
 8001d46:	615a      	str	r2, [r3, #20]
 8001d48:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <_ZL12MX_GPIO_Initv+0xf0>)
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	029b      	lsls	r3, r3, #10
 8001d50:	4013      	ands	r3, r2
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DATA_OUT_Pin, GPIO_PIN_RESET);
 8001d56:	2390      	movs	r3, #144	; 0x90
 8001d58:	05db      	lsls	r3, r3, #23
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2160      	movs	r1, #96	; 0x60
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7fe fcf2 	bl	8000748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d64:	193b      	adds	r3, r7, r4
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	0192      	lsls	r2, r2, #6
 8001d6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d6c:	193b      	adds	r3, r7, r4
 8001d6e:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <_ZL12MX_GPIO_Initv+0xf4>)
 8001d70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	193b      	adds	r3, r7, r4
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d78:	193b      	adds	r3, r7, r4
 8001d7a:	4a1a      	ldr	r2, [pc, #104]	; (8001de4 <_ZL12MX_GPIO_Initv+0xf8>)
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	0010      	movs	r0, r2
 8001d80:	f7fe fb66 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d84:	193b      	adds	r3, r7, r4
 8001d86:	2220      	movs	r2, #32
 8001d88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	193b      	adds	r3, r7, r4
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	193b      	adds	r3, r7, r4
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	193b      	adds	r3, r7, r4
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	193a      	adds	r2, r7, r4
 8001d9e:	2390      	movs	r3, #144	; 0x90
 8001da0:	05db      	lsls	r3, r3, #23
 8001da2:	0011      	movs	r1, r2
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7fe fb53 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_OUT_Pin */
  GPIO_InitStruct.Pin = DATA_OUT_Pin;
 8001daa:	0021      	movs	r1, r4
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	2240      	movs	r2, #64	; 0x40
 8001db0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	2201      	movs	r2, #1
 8001db6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DATA_OUT_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	187a      	adds	r2, r7, r1
 8001dc6:	2390      	movs	r3, #144	; 0x90
 8001dc8:	05db      	lsls	r3, r3, #23
 8001dca:	0011      	movs	r1, r2
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7fe fb3f 	bl	8000450 <HAL_GPIO_Init>

}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b009      	add	sp, #36	; 0x24
 8001dd8:	bd90      	pop	{r4, r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	10210000 	.word	0x10210000
 8001de4:	48000800 	.word	0x48000800

08001de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_ZN16LED_STRIP_WS2811ILt50EEC1Ev>:
template<uint16_t NUM_LEDS>
class LED_STRIP_WS2811
{
public:
//Constructors
LED_STRIP_WS2811()
 8001df2:	b5b0      	push	{r4, r5, r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
{
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	2431      	movs	r4, #49	; 0x31
 8001e00:	001d      	movs	r5, r3
 8001e02:	2c00      	cmp	r4, #0
 8001e04:	db08      	blt.n	8001e18 <_ZN16LED_STRIP_WS2811ILt50EEC1Ev+0x26>
 8001e06:	2300      	movs	r3, #0
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	0028      	movs	r0, r5
 8001e0e:	f000 f884 	bl	8001f1a <_ZN16LED_STRIP_WS2811ILt50EE8LED_NODEC1Ehhh>
 8001e12:	3503      	adds	r5, #3
 8001e14:	3c01      	subs	r4, #1
 8001e16:	e7f4      	b.n	8001e02 <_ZN16LED_STRIP_WS2811ILt50EEC1Ev+0x10>
	this->lastLedChanged = NUM_LEDS - 1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2231      	movs	r2, #49	; 0x31
 8001e1c:	801a      	strh	r2, [r3, #0]
}
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bdb0      	pop	{r4, r5, r7, pc}

08001e28 <_ZN16LED_STRIP_WS2811ILt50EE16writeEntireStripEhhh>:
	this->outputByte(node.green);

}

template<uint16_t NUM_LEDS>
void LED_STRIP_WS2811<NUM_LEDS>::writeEntireStrip(uint8_t red, uint8_t green, uint8_t blue)
 8001e28:	b5b0      	push	{r4, r5, r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	000c      	movs	r4, r1
 8001e32:	0010      	movs	r0, r2
 8001e34:	0019      	movs	r1, r3
 8001e36:	1cfb      	adds	r3, r7, #3
 8001e38:	1c22      	adds	r2, r4, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	1cbb      	adds	r3, r7, #2
 8001e3e:	1c02      	adds	r2, r0, #0
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	1c7b      	adds	r3, r7, #1
 8001e44:	1c0a      	adds	r2, r1, #0
 8001e46:	701a      	strb	r2, [r3, #0]
{
	for(uint8_t i = 0; i < NUM_LEDS; i++)
 8001e48:	230f      	movs	r3, #15
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	230f      	movs	r3, #15
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b31      	cmp	r3, #49	; 0x31
 8001e58:	d821      	bhi.n	8001e9e <_ZN16LED_STRIP_WS2811ILt50EE16writeEntireStripEhhh+0x76>
	{
		this->leds[i] = LED_NODE(red, green, blue);
 8001e5a:	1c7b      	adds	r3, r7, #1
 8001e5c:	781c      	ldrb	r4, [r3, #0]
 8001e5e:	1cbb      	adds	r3, r7, #2
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	1cfb      	adds	r3, r7, #3
 8001e64:	7819      	ldrb	r1, [r3, #0]
 8001e66:	250c      	movs	r5, #12
 8001e68:	1978      	adds	r0, r7, r5
 8001e6a:	0023      	movs	r3, r4
 8001e6c:	f000 f855 	bl	8001f1a <_ZN16LED_STRIP_WS2811ILt50EE8LED_NODEC1Ehhh>
 8001e70:	240f      	movs	r4, #15
 8001e72:	193b      	adds	r3, r7, r4
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	0013      	movs	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	189b      	adds	r3, r3, r2
 8001e7e:	2202      	movs	r2, #2
 8001e80:	18cb      	adds	r3, r1, r3
 8001e82:	189a      	adds	r2, r3, r2
 8001e84:	197b      	adds	r3, r7, r5
 8001e86:	0010      	movs	r0, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	f000 f9f5 	bl	800227c <memcpy>
	for(uint8_t i = 0; i < NUM_LEDS; i++)
 8001e92:	193b      	adds	r3, r7, r4
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	193b      	adds	r3, r7, r4
 8001e98:	3201      	adds	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e7d8      	b.n	8001e50 <_ZN16LED_STRIP_WS2811ILt50EE16writeEntireStripEhhh+0x28>
	}
	//Update last led changed
	this->lastLedChanged = NUM_LEDS - 1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2231      	movs	r2, #49	; 0x31
 8001ea2:	801a      	strh	r2, [r3, #0]
}
 8001ea4:	46c0      	nop			; (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b004      	add	sp, #16
 8001eaa:	bdb0      	pop	{r4, r5, r7, pc}

08001eac <_ZN16LED_STRIP_WS2811ILt50EE7displayEv>:
		this->lastLedChanged = node_number;
	}
}

template<uint16_t NUM_LEDS>
void LED_STRIP_WS2811<NUM_LEDS>::display()
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
{
	//Disable interrupts
	__disable_irq();
	//Write the changed leds
	if(lastLedChanged < NUM_LEDS)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	5e9b      	ldrsh	r3, [r3, r2]
 8001ebc:	2b31      	cmp	r3, #49	; 0x31
 8001ebe:	dc24      	bgt.n	8001f0a <_ZN16LED_STRIP_WS2811ILt50EE7displayEv+0x5e>
	{
		for(int16_t i = 0; i <= lastLedChanged; i++)
 8001ec0:	230e      	movs	r3, #14
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	801a      	strh	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	5e9b      	ldrsh	r3, [r3, r2]
 8001ece:	220e      	movs	r2, #14
 8001ed0:	18ba      	adds	r2, r7, r2
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	5e52      	ldrsh	r2, [r2, r1]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dc17      	bgt.n	8001f0a <_ZN16LED_STRIP_WS2811ILt50EE7displayEv+0x5e>
		{
			this->outputLedNode(leds[i]);
 8001eda:	240e      	movs	r4, #14
 8001edc:	193b      	adds	r3, r7, r4
 8001ede:	2200      	movs	r2, #0
 8001ee0:	5e9a      	ldrsh	r2, [r3, r2]
 8001ee2:	0013      	movs	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	189b      	adds	r3, r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	18d3      	adds	r3, r2, r3
 8001eec:	1c9a      	adds	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	0011      	movs	r1, r2
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 f832 	bl	8001f5c <_ZN16LED_STRIP_WS2811ILt50EE13outputLedNodeERNS0_8LED_NODEE>
		for(int16_t i = 0; i <= lastLedChanged; i++)
 8001ef8:	193b      	adds	r3, r7, r4
 8001efa:	2200      	movs	r2, #0
 8001efc:	5e9b      	ldrsh	r3, [r3, r2]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	193b      	adds	r3, r7, r4
 8001f06:	801a      	strh	r2, [r3, #0]
 8001f08:	e7de      	b.n	8001ec8 <_ZN16LED_STRIP_WS2811ILt50EE7displayEv+0x1c>
		}
	}
	//Latch data
	HAL_Delay(1);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7fe f9ce 	bl	80002ac <HAL_Delay>
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
	//Reenable interrupts
	__enable_irq();
}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b005      	add	sp, #20
 8001f18:	bd90      	pop	{r4, r7, pc}

08001f1a <_ZN16LED_STRIP_WS2811ILt50EE8LED_NODEC1Ehhh>:
	LED_NODE(uint8_t red = 0, uint8_t green = 0, uint8_t blue = 0)
 8001f1a:	b590      	push	{r4, r7, lr}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	000c      	movs	r4, r1
 8001f24:	0010      	movs	r0, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	1cfb      	adds	r3, r7, #3
 8001f2a:	1c22      	adds	r2, r4, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	1cbb      	adds	r3, r7, #2
 8001f30:	1c02      	adds	r2, r0, #0
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	1c7b      	adds	r3, r7, #1
 8001f36:	1c0a      	adds	r2, r1, #0
 8001f38:	701a      	strb	r2, [r3, #0]
		this->red = red;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	1cfa      	adds	r2, r7, #3
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	701a      	strb	r2, [r3, #0]
		this->green = green;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	1cba      	adds	r2, r7, #2
 8001f46:	7812      	ldrb	r2, [r2, #0]
 8001f48:	705a      	strb	r2, [r3, #1]
		this->blue = blue;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	1c7a      	adds	r2, r7, #1
 8001f4e:	7812      	ldrb	r2, [r2, #0]
 8001f50:	709a      	strb	r2, [r3, #2]
	}
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b003      	add	sp, #12
 8001f5a:	bd90      	pop	{r4, r7, pc}

08001f5c <_ZN16LED_STRIP_WS2811ILt50EE13outputLedNodeERNS0_8LED_NODEE>:
inline void LED_STRIP_WS2811<NUM_LEDS>::outputLedNode(LED_NODE& node)
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	this->outputByte(node.blue);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	789a      	ldrb	r2, [r3, #2]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0011      	movs	r1, r2
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 f812 	bl	8001f98 <_ZN16LED_STRIP_WS2811ILt50EE10outputByteEh>
	this->outputByte(node.red);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	781a      	ldrb	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f80b 	bl	8001f98 <_ZN16LED_STRIP_WS2811ILt50EE10outputByteEh>
	this->outputByte(node.green);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	785a      	ldrb	r2, [r3, #1]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	0011      	movs	r1, r2
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f000 f804 	bl	8001f98 <_ZN16LED_STRIP_WS2811ILt50EE10outputByteEh>
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_ZN16LED_STRIP_WS2811ILt50EE10outputByteEh>:
inline void LED_STRIP_WS2811<NUM_LEDS>::outputByte(uint8_t byte)
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	000a      	movs	r2, r1
 8001fa2:	1cfb      	adds	r3, r7, #3
 8001fa4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i++)
 8001fa6:	230f      	movs	r3, #15
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	230f      	movs	r3, #15
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b07      	cmp	r3, #7
 8001fb6:	d818      	bhi.n	8001fea <_ZN16LED_STRIP_WS2811ILt50EE10outputByteEh+0x52>
		this->outputBit(byte & (1 << (7-i)));
 8001fb8:	1cfb      	adds	r3, r7, #3
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	240f      	movs	r4, #15
 8001fbe:	193b      	adds	r3, r7, r4
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2107      	movs	r1, #7
 8001fc4:	1acb      	subs	r3, r1, r3
 8001fc6:	411a      	asrs	r2, r3
 8001fc8:	0013      	movs	r3, r2
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4013      	ands	r3, r2
 8001fce:	1e5a      	subs	r2, r3, #1
 8001fd0:	4193      	sbcs	r3, r2
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 f80b 	bl	8001ff4 <_ZN16LED_STRIP_WS2811ILt50EE9outputBitEb>
	for(uint8_t i = 0; i < 8; i++)
 8001fde:	193b      	adds	r3, r7, r4
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	193b      	adds	r3, r7, r4
 8001fe4:	3201      	adds	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e7e1      	b.n	8001fae <_ZN16LED_STRIP_WS2811ILt50EE10outputByteEh+0x16>
}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b005      	add	sp, #20
 8001ff0:	bd90      	pop	{r4, r7, pc}
	...

08001ff4 <_ZN16LED_STRIP_WS2811ILt50EE9outputBitEb>:
inline void LED_STRIP_WS2811<NUM_LEDS>::outputBit(bool high_nlow)
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	000a      	movs	r2, r1
 8001ffe:	1cfb      	adds	r3, r7, #3
 8002000:	701a      	strb	r2, [r3, #0]
			  : [gpio_odr] "r" (&DATA_OUT_GPIO_Port->ODR), [gpio_pin] "r" (DATA_OUT_Pin));
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <DELAY_LOOP3+0xc>)
 8002004:	2240      	movs	r2, #64	; 0x40
 8002006:	4618      	mov	r0, r3
 8002008:	6801      	ldr	r1, [r0, #0]
 800200a:	4311      	orrs	r1, r2
 800200c:	6001      	str	r1, [r0, #0]
	if(high_nlow)
 800200e:	1cfb      	adds	r3, r7, #3
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <DELAY_LOOP1+0x4>
				  "BNE DELAY_LOOP1\n\t");
 8002016:	4809      	ldr	r0, [pc, #36]	; (800203c <DELAY_LOOP3+0x10>)

08002018 <DELAY_LOOP1>:
 8002018:	3801      	subs	r0, #1
 800201a:	d1fd      	bne.n	8002018 <DELAY_LOOP1>
			  : [gpio_odr] "r" (&DATA_OUT_GPIO_Port->ODR), [gpio_pin] "r" (~DATA_OUT_Pin));
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <DELAY_LOOP3+0xc>)
 800201e:	2341      	movs	r3, #65	; 0x41
 8002020:	425b      	negs	r3, r3
 8002022:	4610      	mov	r0, r2
 8002024:	6801      	ldr	r1, [r0, #0]
 8002026:	4019      	ands	r1, r3
 8002028:	6001      	str	r1, [r0, #0]
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <DELAY_LOOP3+0x14>)

0800202c <DELAY_LOOP3>:
 800202c:	3801      	subs	r0, #1
 800202e:	d1fd      	bne.n	800202c <DELAY_LOOP3>
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b002      	add	sp, #8
 8002036:	bd80      	pop	{r7, pc}
 8002038:	48000014 	.word	0x48000014
 800203c:	00000004 	.word	0x00000004
 8002040:	0000000f 	.word	0x0000000f

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_MspInit+0x44>)
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <HAL_MspInit+0x44>)
 8002050:	2101      	movs	r1, #1
 8002052:	430a      	orrs	r2, r1
 8002054:	619a      	str	r2, [r3, #24]
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_MspInit+0x44>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2201      	movs	r2, #1
 800205c:	4013      	ands	r3, r2
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_MspInit+0x44>)
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_MspInit+0x44>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0549      	lsls	r1, r1, #21
 800206c:	430a      	orrs	r2, r1
 800206e:	61da      	str	r2, [r3, #28]
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_MspInit+0x44>)
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	055b      	lsls	r3, r3, #21
 8002078:	4013      	ands	r3, r2
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b002      	add	sp, #8
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	2314      	movs	r3, #20
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	0018      	movs	r0, r3
 800209a:	2314      	movs	r3, #20
 800209c:	001a      	movs	r2, r3
 800209e:	2100      	movs	r1, #0
 80020a0:	f000 f8f5 	bl	800228e <memset>
  if(huart->Instance==USART2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_UART_MspInit+0x90>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d132      	bne.n	8002114 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <HAL_UART_MspInit+0x94>)
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_UART_MspInit+0x94>)
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	0289      	lsls	r1, r1, #10
 80020b8:	430a      	orrs	r2, r1
 80020ba:	61da      	str	r2, [r3, #28]
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_UART_MspInit+0x94>)
 80020be:	69da      	ldr	r2, [r3, #28]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	029b      	lsls	r3, r3, #10
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_UART_MspInit+0x94>)
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_UART_MspInit+0x94>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0289      	lsls	r1, r1, #10
 80020d4:	430a      	orrs	r2, r1
 80020d6:	615a      	str	r2, [r3, #20]
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_UART_MspInit+0x94>)
 80020da:	695a      	ldr	r2, [r3, #20]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	029b      	lsls	r3, r3, #10
 80020e0:	4013      	ands	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020e6:	2114      	movs	r1, #20
 80020e8:	187b      	adds	r3, r7, r1
 80020ea:	220c      	movs	r2, #12
 80020ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	2202      	movs	r2, #2
 80020f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	187b      	adds	r3, r7, r1
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002100:	187b      	adds	r3, r7, r1
 8002102:	2201      	movs	r2, #1
 8002104:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002106:	187a      	adds	r2, r7, r1
 8002108:	2390      	movs	r3, #144	; 0x90
 800210a:	05db      	lsls	r3, r3, #23
 800210c:	0011      	movs	r1, r2
 800210e:	0018      	movs	r0, r3
 8002110:	f7fe f99e 	bl	8000450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b00a      	add	sp, #40	; 0x28
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40004400 	.word	0x40004400
 8002120:	40021000 	.word	0x40021000

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002128:	46c0      	nop			; (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <HardFault_Handler+0x4>

08002134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214c:	f7fe f898 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <SystemInit+0x70>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <SystemInit+0x70>)
 8002162:	2101      	movs	r1, #1
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <SystemInit+0x70>)
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <SystemInit+0x70>)
 800216e:	4917      	ldr	r1, [pc, #92]	; (80021cc <SystemInit+0x74>)
 8002170:	400a      	ands	r2, r1
 8002172:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002174:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <SystemInit+0x70>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <SystemInit+0x70>)
 800217a:	4915      	ldr	r1, [pc, #84]	; (80021d0 <SystemInit+0x78>)
 800217c:	400a      	ands	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <SystemInit+0x70>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <SystemInit+0x70>)
 8002186:	4913      	ldr	r1, [pc, #76]	; (80021d4 <SystemInit+0x7c>)
 8002188:	400a      	ands	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <SystemInit+0x70>)
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <SystemInit+0x70>)
 8002192:	4911      	ldr	r1, [pc, #68]	; (80021d8 <SystemInit+0x80>)
 8002194:	400a      	ands	r2, r1
 8002196:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <SystemInit+0x70>)
 800219a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <SystemInit+0x70>)
 800219e:	210f      	movs	r1, #15
 80021a0:	438a      	bics	r2, r1
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <SystemInit+0x70>)
 80021a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <SystemInit+0x70>)
 80021aa:	490c      	ldr	r1, [pc, #48]	; (80021dc <SystemInit+0x84>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SystemInit+0x70>)
 80021b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SystemInit+0x70>)
 80021b6:	2101      	movs	r1, #1
 80021b8:	438a      	bics	r2, r1
 80021ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <SystemInit+0x70>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]

}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08ffb80c 	.word	0x08ffb80c
 80021d0:	fef6ffff 	.word	0xfef6ffff
 80021d4:	fffbffff 	.word	0xfffbffff
 80021d8:	ffc0ffff 	.word	0xffc0ffff
 80021dc:	fffcfe2c 	.word	0xfffcfe2c

080021e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021e0:	480d      	ldr	r0, [pc, #52]	; (8002218 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e4:	480d      	ldr	r0, [pc, #52]	; (800221c <LoopForever+0x6>)
  ldr r1, =_edata
 80021e6:	490e      	ldr	r1, [pc, #56]	; (8002220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <LoopForever+0xe>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ec:	e002      	b.n	80021f4 <LoopCopyDataInit>

080021ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f2:	3304      	adds	r3, #4

080021f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021f8:	d3f9      	bcc.n	80021ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021fc:	4c0b      	ldr	r4, [pc, #44]	; (800222c <LoopForever+0x16>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002200:	e001      	b.n	8002206 <LoopFillZerobss>

08002202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002204:	3204      	adds	r2, #4

08002206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002208:	d3fb      	bcc.n	8002202 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800220a:	f7ff ffa5 	bl	8002158 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800220e:	f000 f811 	bl	8002234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002212:	f7ff fc2b 	bl	8001a6c <main>

08002216 <LoopForever>:

LoopForever:
    b LoopForever
 8002216:	e7fe      	b.n	8002216 <LoopForever>
  ldr   r0, =_estack
 8002218:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800221c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002220:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002224:	080022f8 	.word	0x080022f8
  ldr r2, =_sbss
 8002228:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800222c:	20000094 	.word	0x20000094

08002230 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC1_COMP_IRQHandler>
	...

08002234 <__libc_init_array>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	2600      	movs	r6, #0
 8002238:	4d0c      	ldr	r5, [pc, #48]	; (800226c <__libc_init_array+0x38>)
 800223a:	4c0d      	ldr	r4, [pc, #52]	; (8002270 <__libc_init_array+0x3c>)
 800223c:	1b64      	subs	r4, r4, r5
 800223e:	10a4      	asrs	r4, r4, #2
 8002240:	42a6      	cmp	r6, r4
 8002242:	d109      	bne.n	8002258 <__libc_init_array+0x24>
 8002244:	2600      	movs	r6, #0
 8002246:	f000 f82b 	bl	80022a0 <_init>
 800224a:	4d0a      	ldr	r5, [pc, #40]	; (8002274 <__libc_init_array+0x40>)
 800224c:	4c0a      	ldr	r4, [pc, #40]	; (8002278 <__libc_init_array+0x44>)
 800224e:	1b64      	subs	r4, r4, r5
 8002250:	10a4      	asrs	r4, r4, #2
 8002252:	42a6      	cmp	r6, r4
 8002254:	d105      	bne.n	8002262 <__libc_init_array+0x2e>
 8002256:	bd70      	pop	{r4, r5, r6, pc}
 8002258:	00b3      	lsls	r3, r6, #2
 800225a:	58eb      	ldr	r3, [r5, r3]
 800225c:	4798      	blx	r3
 800225e:	3601      	adds	r6, #1
 8002260:	e7ee      	b.n	8002240 <__libc_init_array+0xc>
 8002262:	00b3      	lsls	r3, r6, #2
 8002264:	58eb      	ldr	r3, [r5, r3]
 8002266:	4798      	blx	r3
 8002268:	3601      	adds	r6, #1
 800226a:	e7f2      	b.n	8002252 <__libc_init_array+0x1e>
 800226c:	080022f0 	.word	0x080022f0
 8002270:	080022f0 	.word	0x080022f0
 8002274:	080022f0 	.word	0x080022f0
 8002278:	080022f4 	.word	0x080022f4

0800227c <memcpy>:
 800227c:	2300      	movs	r3, #0
 800227e:	b510      	push	{r4, lr}
 8002280:	429a      	cmp	r2, r3
 8002282:	d100      	bne.n	8002286 <memcpy+0xa>
 8002284:	bd10      	pop	{r4, pc}
 8002286:	5ccc      	ldrb	r4, [r1, r3]
 8002288:	54c4      	strb	r4, [r0, r3]
 800228a:	3301      	adds	r3, #1
 800228c:	e7f8      	b.n	8002280 <memcpy+0x4>

0800228e <memset>:
 800228e:	0003      	movs	r3, r0
 8002290:	1812      	adds	r2, r2, r0
 8002292:	4293      	cmp	r3, r2
 8002294:	d100      	bne.n	8002298 <memset+0xa>
 8002296:	4770      	bx	lr
 8002298:	7019      	strb	r1, [r3, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	e7f9      	b.n	8002292 <memset+0x4>
	...

080022a0 <_init>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr

080022ac <_fini>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b2:	bc08      	pop	{r3}
 80022b4:	469e      	mov	lr, r3
 80022b6:	4770      	bx	lr
